/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Supported blockchains  Tatum supports multiple blockchains and various blockchain features.  Because not all blockchains function identically, Tatum supports a different set of features on each blockchain.  To see all the blockchains that Tatum supports, please refer to [this article](https://docs.tatum.io/introduction/supported-blockchains).  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Tatum.CSharp.Solana.Core.Client;
using Tatum.CSharp.Solana.Core.Model;

namespace Tatum.CSharp.Solana.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <returns>TransactionHash</returns>
        TransactionHash SolanaBlockchainTransfer(TransferSolanaBlockchain transferSolanaBlockchain);
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <returns>SignatureId</returns>
        SignatureId SolanaBlockchainTransfer(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS);
        /// <summary>
        /// Broadcast and confirm signed Solana transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <returns>SolanaTransactionHashWithConfirm</returns>
        SolanaTransactionHashWithConfirm SolanaBroadcastConfirm(SolanaBroadcastConfirm solanaBroadcastConfirm);
        /// <summary>
        /// Generate Solana wallet
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Generate Solana private key and account address.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SolanaWallet</returns>
        SolanaWallet SolanaGenerateWallet();
        /// <summary>
        /// Get Solana Account balance
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <returns>SolBalance</returns>
        SolBalance SolanaGetBalance(string address);
        /// <summary>
        /// Get Solana block by number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <returns>SolanaBlock</returns>
        SolanaBlock SolanaGetBlock(decimal height);
        /// <summary>
        /// Get current block number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>decimal</returns>
        decimal SolanaGetCurrentBlock();
        /// <summary>
        /// Get Solana Transaction
        /// </summary>
        /// <remarks>
        /// 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <returns>SolanaTx</returns>
        SolanaTx SolanaGetTransaction(string hash, string commitment = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiWithHttpInfoSync : IApiAccessor
    {
        #region Synchronous Operations With Http Info
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <returns>ApiResponse of TransactionHash</returns>
        ApiResponse<TransactionHash> SolanaBlockchainTransferWithHttpInfo(TransferSolanaBlockchain transferSolanaBlockchain);
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <returns>ApiResponse of SignatureId</returns>
        ApiResponse<SignatureId> SolanaBlockchainTransferWithHttpInfo(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS);
        /// <summary>
        /// Broadcast and confirm signed Solana transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <returns>ApiResponse of SolanaTransactionHashWithConfirm</returns>
        ApiResponse<SolanaTransactionHashWithConfirm> SolanaBroadcastConfirmWithHttpInfo(SolanaBroadcastConfirm solanaBroadcastConfirm);
        /// <summary>
        /// Generate Solana wallet
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Generate Solana private key and account address.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SolanaWallet</returns>
        ApiResponse<SolanaWallet> SolanaGenerateWalletWithHttpInfo();
        /// <summary>
        /// Get Solana Account balance
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <returns>ApiResponse of SolBalance</returns>
        ApiResponse<SolBalance> SolanaGetBalanceWithHttpInfo(string address);
        /// <summary>
        /// Get Solana block by number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <returns>ApiResponse of SolanaBlock</returns>
        ApiResponse<SolanaBlock> SolanaGetBlockWithHttpInfo(decimal height);
        /// <summary>
        /// Get current block number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> SolanaGetCurrentBlockWithHttpInfo();
        /// <summary>
        /// Get Solana Transaction
        /// </summary>
        /// <remarks>
        /// 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <returns>ApiResponse of SolanaTx</returns>
        ApiResponse<SolanaTx> SolanaGetTransactionWithHttpInfo(string hash, string commitment = default(string));
        #endregion Synchronous Operations With Http Info
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHash</returns>
        System.Threading.Tasks.Task<TransactionHash> SolanaBlockchainTransferAsync(TransferSolanaBlockchain transferSolanaBlockchain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureId</returns>
        System.Threading.Tasks.Task<SignatureId> SolanaBlockchainTransferAsync(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Broadcast and confirm signed Solana transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaTransactionHashWithConfirm</returns>
        System.Threading.Tasks.Task<SolanaTransactionHashWithConfirm> SolanaBroadcastConfirmAsync(SolanaBroadcastConfirm solanaBroadcastConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Solana wallet
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Generate Solana private key and account address.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaWallet</returns>
        System.Threading.Tasks.Task<SolanaWallet> SolanaGenerateWalletAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana Account balance
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolBalance</returns>
        System.Threading.Tasks.Task<SolBalance> SolanaGetBalanceAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana block by number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaBlock</returns>
        System.Threading.Tasks.Task<SolanaBlock> SolanaGetBlockAsync(decimal height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current block number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> SolanaGetCurrentBlockAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana Transaction
        /// </summary>
        /// <remarks>
        /// 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaTx</returns>
        System.Threading.Tasks.Task<SolanaTx> SolanaGetTransactionAsync(string hash, string commitment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApiWithHttpInfoAsync : IApiAccessor
    {
        #region Asynchronous Operations With Http Info
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionHash>> SolanaBlockchainTransferWithHttpInfoAsync(TransferSolanaBlockchain transferSolanaBlockchain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send SOL from account to account
        /// </summary>
        /// <remarks>
        /// 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureId)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureId>> SolanaBlockchainTransferWithHttpInfoAsync(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Broadcast and confirm signed Solana transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaTransactionHashWithConfirm)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolanaTransactionHashWithConfirm>> SolanaBroadcastConfirmWithHttpInfoAsync(SolanaBroadcastConfirm solanaBroadcastConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Solana wallet
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Generate Solana private key and account address.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaWallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolanaWallet>> SolanaGenerateWalletWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana Account balance
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolBalance>> SolanaGetBalanceWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana block by number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaBlock)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolanaBlock>> SolanaGetBlockWithHttpInfoAsync(decimal height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get current block number
        /// </summary>
        /// <remarks>
        /// 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> SolanaGetCurrentBlockWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Solana Transaction
        /// </summary>
        /// <remarks>
        /// 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaTx)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolanaTx>> SolanaGetTransactionWithHttpInfoAsync(string hash, string commitment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations With Http Info
    }


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISolanaApi : ISolanaApiSync, ISolanaApiWithHttpInfoSync, ISolanaApiAsync, ISolanaApiWithHttpInfoAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SolanaApi : ISolanaApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SolanaApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SolanaApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Solana.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client =  ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Solana.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SolanaApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Solana.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Solana.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SolanaApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = Tatum.CSharp.Solana.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <returns>TransactionHash</returns>
        public TransactionHash SolanaBlockchainTransfer(TransferSolanaBlockchain transferSolanaBlockchain)
        {
            var localVarResponse = SolanaBlockchainTransferWithHttpInfo(transferSolanaBlockchain);

            var exception = ExceptionFactory?.Invoke("SolanaBlockchainTransfer", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <returns>ApiResponse of TransactionHash</returns>
        public ApiResponse<TransactionHash> SolanaBlockchainTransferWithHttpInfo(TransferSolanaBlockchain transferSolanaBlockchain)
        {
            // verify the required parameter 'transferSolanaBlockchain' is set
            if (transferSolanaBlockchain == null)
                throw new ApiException(400, "Missing required parameter 'transferSolanaBlockchain' when calling SolanaApi->SolanaBlockchainTransfer");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferSolanaBlockchain;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<TransactionHash>("/v3/solana/transaction", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionHash</returns>
        public async System.Threading.Tasks.Task<TransactionHash> SolanaBlockchainTransferAsync(TransferSolanaBlockchain transferSolanaBlockchain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaBlockchainTransferWithHttpInfoAsync(transferSolanaBlockchain, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaBlockchainTransfer", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchain"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionHash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionHash>> SolanaBlockchainTransferWithHttpInfoAsync(TransferSolanaBlockchain transferSolanaBlockchain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferSolanaBlockchain' is set
            if (transferSolanaBlockchain == null)
                throw new ApiException(400, "Missing required parameter 'transferSolanaBlockchain' when calling SolanaApi->SolanaBlockchainTransfer");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferSolanaBlockchain;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<TransactionHash>("/v3/solana/transaction", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <returns>SignatureId</returns>
        public SignatureId SolanaBlockchainTransfer(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS)
        {
            var localVarResponse = SolanaBlockchainTransferWithHttpInfo(transferSolanaBlockchainKMS);

            var exception = ExceptionFactory?.Invoke("SolanaBlockchainTransfer_0", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <returns>ApiResponse of SignatureId</returns>
        public ApiResponse<SignatureId> SolanaBlockchainTransferWithHttpInfo(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS)
        {
            // verify the required parameter 'transferSolanaBlockchainKMS' is set
            if (transferSolanaBlockchainKMS == null)
                throw new ApiException(400, "Missing required parameter 'transferSolanaBlockchainKMS' when calling SolanaApi->SolanaBlockchainTransfer_0");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferSolanaBlockchainKMS;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<SignatureId>("/v3/solana/transaction", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignatureId</returns>
        public async System.Threading.Tasks.Task<SignatureId> SolanaBlockchainTransferAsync(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaBlockchainTransferWithHttpInfoAsync(transferSolanaBlockchainKMS, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaBlockchainTransfer_0", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Send SOL from account to account 2 credits per API call. Send SOL from account to account. This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key. No one should ever send it&#39;s own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production, Tatum KMS should be used for the highest security standards, and signatureId should be present in the request. Alternatively, using the Tatum client library for supported languages.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSolanaBlockchainKMS"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignatureId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureId>> SolanaBlockchainTransferWithHttpInfoAsync(TransferSolanaBlockchainKMS transferSolanaBlockchainKMS, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transferSolanaBlockchainKMS' is set
            if (transferSolanaBlockchainKMS == null)
                throw new ApiException(400, "Missing required parameter 'transferSolanaBlockchainKMS' when calling SolanaApi->SolanaBlockchainTransfer_0");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = transferSolanaBlockchainKMS;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<SignatureId>("/v3/solana/transaction", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Broadcast and confirm signed Solana transaction 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <returns>SolanaTransactionHashWithConfirm</returns>
        public SolanaTransactionHashWithConfirm SolanaBroadcastConfirm(SolanaBroadcastConfirm solanaBroadcastConfirm)
        {
            var localVarResponse = SolanaBroadcastConfirmWithHttpInfo(solanaBroadcastConfirm);

            var exception = ExceptionFactory?.Invoke("SolanaBroadcastConfirm", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcast and confirm signed Solana transaction 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <returns>ApiResponse of SolanaTransactionHashWithConfirm</returns>
        public ApiResponse<SolanaTransactionHashWithConfirm> SolanaBroadcastConfirmWithHttpInfo(SolanaBroadcastConfirm solanaBroadcastConfirm)
        {
            // verify the required parameter 'solanaBroadcastConfirm' is set
            if (solanaBroadcastConfirm == null)
                throw new ApiException(400, "Missing required parameter 'solanaBroadcastConfirm' when calling SolanaApi->SolanaBroadcastConfirm");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = solanaBroadcastConfirm;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<SolanaTransactionHashWithConfirm>("/v3/solana/broadcast/confirm", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Broadcast and confirm signed Solana transaction 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaTransactionHashWithConfirm</returns>
        public async System.Threading.Tasks.Task<SolanaTransactionHashWithConfirm> SolanaBroadcastConfirmAsync(SolanaBroadcastConfirm solanaBroadcastConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaBroadcastConfirmWithHttpInfoAsync(solanaBroadcastConfirm, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaBroadcastConfirm", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcast and confirm signed Solana transaction 10 credits per API call. Broadcast signed custom transactions to Solana blockchain and waits for transaction confirmation depending on the commitment given. More information about commitment levels here
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="solanaBroadcastConfirm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaTransactionHashWithConfirm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolanaTransactionHashWithConfirm>> SolanaBroadcastConfirmWithHttpInfoAsync(SolanaBroadcastConfirm solanaBroadcastConfirm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'solanaBroadcastConfirm' is set
            if (solanaBroadcastConfirm == null)
                throw new ApiException(400, "Missing required parameter 'solanaBroadcastConfirm' when calling SolanaApi->SolanaBroadcastConfirm");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = solanaBroadcastConfirm;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<SolanaTransactionHashWithConfirm>("/v3/solana/broadcast/confirm", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Generate Solana wallet 1 credit per API call. Generate Solana private key and account address.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SolanaWallet</returns>
        public SolanaWallet SolanaGenerateWallet()
        {
            var localVarResponse = SolanaGenerateWalletWithHttpInfo();

            var exception = ExceptionFactory?.Invoke("SolanaGenerateWallet", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Solana wallet 1 credit per API call. Generate Solana private key and account address.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SolanaWallet</returns>
        public ApiResponse<SolanaWallet> SolanaGenerateWalletWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<SolanaWallet>("/v3/solana/wallet", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Generate Solana wallet 1 credit per API call. Generate Solana private key and account address.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaWallet</returns>
        public async System.Threading.Tasks.Task<SolanaWallet> SolanaGenerateWalletAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaGenerateWalletWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaGenerateWallet", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Solana wallet 1 credit per API call. Generate Solana private key and account address.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaWallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolanaWallet>> SolanaGenerateWalletWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<SolanaWallet>("/v3/solana/wallet", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana Account balance 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <returns>SolBalance</returns>
        public SolBalance SolanaGetBalance(string address)
        {
            var localVarResponse = SolanaGetBalanceWithHttpInfo(address);

            var exception = ExceptionFactory?.Invoke("SolanaGetBalance", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana Account balance 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <returns>ApiResponse of SolBalance</returns>
        public ApiResponse<SolBalance> SolanaGetBalanceWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SolanaApi->SolanaGetBalance");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<SolBalance>("/v3/solana/account/balance/{address}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana Account balance 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolBalance</returns>
        public async System.Threading.Tasks.Task<SolBalance> SolanaGetBalanceAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaGetBalanceWithHttpInfoAsync(address, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaGetBalance", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana Account balance 1 credit per API call. Get Solana account balance in SOL. This method does not prints any balance of the SPL or NFT tokens on the account.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolBalance>> SolanaGetBalanceWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling SolanaApi->SolanaGetBalance");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<SolBalance>("/v3/solana/account/balance/{address}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana block by number 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <returns>SolanaBlock</returns>
        public SolanaBlock SolanaGetBlock(decimal height)
        {
            var localVarResponse = SolanaGetBlockWithHttpInfo(height);

            var exception = ExceptionFactory?.Invoke("SolanaGetBlock", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana block by number 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <returns>ApiResponse of SolanaBlock</returns>
        public ApiResponse<SolanaBlock> SolanaGetBlockWithHttpInfo(decimal height)
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("height", ClientUtils.ParameterToString(height)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<SolanaBlock>("/v3/solana/block/{height}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana block by number 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaBlock</returns>
        public async System.Threading.Tasks.Task<SolanaBlock> SolanaGetBlockAsync(decimal height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaGetBlockWithHttpInfoAsync(height, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaGetBlock", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana block by number 1 credit per API call. Get Solana block by block hash or block number. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#getblock
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block number</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaBlock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolanaBlock>> SolanaGetBlockWithHttpInfoAsync(decimal height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("height", ClientUtils.ParameterToString(height)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<SolanaBlock>("/v3/solana/block/{height}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get current block number 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>decimal</returns>
        public decimal SolanaGetCurrentBlock()
        {
            var localVarResponse = SolanaGetCurrentBlockWithHttpInfo();

            var exception = ExceptionFactory?.Invoke("SolanaGetCurrentBlock", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current block number 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of decimal</returns>
        public ApiResponse<decimal> SolanaGetCurrentBlockWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<decimal>("/v3/solana/block/current", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get current block number 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> SolanaGetCurrentBlockAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaGetCurrentBlockWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaGetCurrentBlock", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get current block number 1 credit per API call. Get Solana current block number. This is the number of the latest block in the blockchain.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal>> SolanaGetCurrentBlockWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<decimal>("/v3/solana/block/current", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana Transaction 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <returns>SolanaTx</returns>
        public SolanaTx SolanaGetTransaction(string hash, string commitment = default(string))
        {
            var localVarResponse = SolanaGetTransactionWithHttpInfo(hash, commitment);

            var exception = ExceptionFactory?.Invoke("SolanaGetTransaction", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana Transaction 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <returns>ApiResponse of SolanaTx</returns>
        public ApiResponse<SolanaTx> SolanaGetTransactionWithHttpInfo(string hash, string commitment = default(string))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SolanaApi->SolanaGetTransaction");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter
            if (commitment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "commitment", commitment));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<SolanaTx>("/v3/solana/transaction/{hash}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get Solana Transaction 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SolanaTx</returns>
        public async System.Threading.Tasks.Task<SolanaTx> SolanaGetTransactionAsync(string hash, string commitment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SolanaGetTransactionWithHttpInfoAsync(hash, commitment, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("SolanaGetTransaction", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Solana Transaction 2 credit per API call. Get Solana transaction by transaction hash. You can find full data description here - https://docs.solana.com/developing/clients/jsonrpc-api#gettransaction
        /// </summary>
        /// <exception cref="Tatum.CSharp.Solana.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <param name="commitment">Commitment of the transaction. If not defined, all transactions are being scanned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SolanaTx)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolanaTx>> SolanaGetTransactionWithHttpInfoAsync(string hash, string commitment = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling SolanaApi->SolanaGetTransaction");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter
            if (commitment != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "commitment", commitment));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<SolanaTx>("/v3/solana/transaction/{hash}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

    }
}
