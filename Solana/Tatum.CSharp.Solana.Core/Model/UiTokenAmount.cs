/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Solana.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Solana.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Solana.Core.Model
{
    /// <summary>
    /// UiTokenAmount
    /// </summary>
    [DataContract(Name = "UiTokenAmount")]
    public partial class UiTokenAmount : IEquatable<UiTokenAmount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UiTokenAmount" /> class.
        /// </summary>
        /// <param name="amount">Raw amount of tokens as a string, ignoring decimals..</param>
        /// <param name="decimals">Number of decimals configured for token&#39;s mint..</param>
        /// <param name="uiAmount">Token amount as a float, accounting for decimals..</param>
        /// <param name="uiAmountString">Token amount as a string, accounting for decimals..</param>
        public UiTokenAmount(string amount = default(string), decimal decimals = default(decimal), decimal? uiAmount = default(decimal?), string uiAmountString = default(string))
        {
            this.Amount = amount;
            this.Decimals = decimals;
            this.UiAmount = uiAmount;
            this.UiAmountString = uiAmountString;
        }


        /// <summary>
        /// Raw amount of tokens as a string, ignoring decimals.
        /// </summary>
        /// <value>Raw amount of tokens as a string, ignoring decimals.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Number of decimals configured for token&#39;s mint.
        /// </summary>
        /// <value>Number of decimals configured for token&#39;s mint.</value>
        [DataMember(Name = "decimals", EmitDefaultValue = false)]
        public decimal Decimals { get; set; }

        /// <summary>
        /// Token amount as a float, accounting for decimals.
        /// </summary>
        /// <value>Token amount as a float, accounting for decimals.</value>
        [DataMember(Name = "uiAmount", EmitDefaultValue = true)]
        public decimal? UiAmount { get; set; }

        /// <summary>
        /// Token amount as a string, accounting for decimals.
        /// </summary>
        /// <value>Token amount as a string, accounting for decimals.</value>
        [DataMember(Name = "uiAmountString", EmitDefaultValue = false)]
        public string UiAmountString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UiTokenAmount {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  UiAmount: ").Append(UiAmount).Append("\n");
            sb.Append("  UiAmountString: ").Append(UiAmountString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UiTokenAmount);
        }

        /// <summary>
        /// Returns true if UiTokenAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of UiTokenAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UiTokenAmount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    this.Decimals.Equals(input.Decimals)
                ) && 
                (
                    this.UiAmount == input.UiAmount ||
                    (this.UiAmount != null &&
                    this.UiAmount.Equals(input.UiAmount))
                ) && 
                (
                    this.UiAmountString == input.UiAmountString ||
                    (this.UiAmountString != null &&
                    this.UiAmountString.Equals(input.UiAmountString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Decimals.GetHashCode();
                if (this.UiAmount != null)
                {
                    hashCode = (hashCode * 59) + this.UiAmount.GetHashCode();
                }
                if (this.UiAmountString != null)
                {
                    hashCode = (hashCode * 59) + this.UiAmountString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
