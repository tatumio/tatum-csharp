/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Solana.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Solana.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Solana.Core.Model
{
    /// <summary>
    /// TokenBalance
    /// </summary>
    [DataContract(Name = "TokenBalance")]
    public partial class TokenBalance : IEquatable<TokenBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenBalance" /> class.
        /// </summary>
        /// <param name="accountIndex">Index of the account in which the token balance is provided for..</param>
        /// <param name="mint">Pubkey of the token&#39;s mint..</param>
        /// <param name="owner">Pubkey of token balance&#39;s owner..</param>
        /// <param name="programId">Pubkey of the Token program that owns the account..</param>
        /// <param name="uiTokenAmount">uiTokenAmount.</param>
        public TokenBalance(decimal accountIndex = default(decimal), string mint = default(string), string owner = default(string), string programId = default(string), UiTokenAmount uiTokenAmount = default(UiTokenAmount))
        {
            this.AccountIndex = accountIndex;
            this.Mint = mint;
            this.Owner = owner;
            this.ProgramId = programId;
            this.UiTokenAmount = uiTokenAmount;
        }


        /// <summary>
        /// Index of the account in which the token balance is provided for.
        /// </summary>
        /// <value>Index of the account in which the token balance is provided for.</value>
        [DataMember(Name = "accountIndex", EmitDefaultValue = false)]
        public decimal AccountIndex { get; set; }

        /// <summary>
        /// Pubkey of the token&#39;s mint.
        /// </summary>
        /// <value>Pubkey of the token&#39;s mint.</value>
        [DataMember(Name = "mint", EmitDefaultValue = false)]
        public string Mint { get; set; }

        /// <summary>
        /// Pubkey of token balance&#39;s owner.
        /// </summary>
        /// <value>Pubkey of token balance&#39;s owner.</value>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Pubkey of the Token program that owns the account.
        /// </summary>
        /// <value>Pubkey of the Token program that owns the account.</value>
        [DataMember(Name = "programId", EmitDefaultValue = false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// Gets or Sets UiTokenAmount
        /// </summary>
        [DataMember(Name = "uiTokenAmount", EmitDefaultValue = false)]
        public UiTokenAmount UiTokenAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenBalance {\n");
            sb.Append("  AccountIndex: ").Append(AccountIndex).Append("\n");
            sb.Append("  Mint: ").Append(Mint).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  UiTokenAmount: ").Append(UiTokenAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenBalance);
        }

        /// <summary>
        /// Returns true if TokenBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenBalance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountIndex == input.AccountIndex ||
                    this.AccountIndex.Equals(input.AccountIndex)
                ) && 
                (
                    this.Mint == input.Mint ||
                    (this.Mint != null &&
                    this.Mint.Equals(input.Mint))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.UiTokenAmount == input.UiTokenAmount ||
                    (this.UiTokenAmount != null &&
                    this.UiTokenAmount.Equals(input.UiTokenAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountIndex.GetHashCode();
                if (this.Mint != null)
                {
                    hashCode = (hashCode * 59) + this.Mint.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.ProgramId != null)
                {
                    hashCode = (hashCode * 59) + this.ProgramId.GetHashCode();
                }
                if (this.UiTokenAmount != null)
                {
                    hashCode = (hashCode * 59) + this.UiTokenAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
