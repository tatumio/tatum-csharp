/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Bitcoin.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Bitcoin.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Bitcoin.Core.Model
{
    /// <summary>
    /// BtcUTXO
    /// </summary>
    [DataContract(Name = "BtcUTXO")]
    public partial class BtcUTXO : IEquatable<BtcUTXO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BtcUTXO" /> class.
        /// </summary>
        /// <param name="version">The version of the transaction.</param>
        /// <param name="height">The height (number) of the block where the transaction is included in.</param>
        /// <param name="value">The amount of the UTXO (in satoshis).</param>
        /// <param name="script">Data generated by the spender; is almost always used as variables to satisfy the conditions in the pubkey script.</param>
        /// <param name="address">The blockchain address of the UTXO owner.</param>
        /// <param name="coinbase">If set to \&quot;true\&quot;, the transaction is a coinbase transaction (a transaction created by a Bitcoin miner to collect their reward).</param>
        /// <param name="hash">The hash of the transaction.</param>
        /// <param name="index">The index of the transaction output checked for the UTXO.</param>
        public BtcUTXO(decimal version = default(decimal), decimal height = default(decimal), decimal value = default(decimal), string script = default(string), string address = default(string), bool coinbase = default(bool), string hash = default(string), decimal index = default(decimal))
        {
            this._Version = version;
            this.Height = height;
            this.Value = value;
            this.Script = script;
            this.Address = address;
            this.Coinbase = coinbase;
            this.Hash = hash;
            this.Index = index;
        }


        /// <summary>
        /// The version of the transaction
        /// </summary>
        /// <value>The version of the transaction</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public decimal _Version { get; set; }

        /// <summary>
        /// The height (number) of the block where the transaction is included in
        /// </summary>
        /// <value>The height (number) of the block where the transaction is included in</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public decimal Height { get; set; }

        /// <summary>
        /// The amount of the UTXO (in satoshis)
        /// </summary>
        /// <value>The amount of the UTXO (in satoshis)</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Data generated by the spender; is almost always used as variables to satisfy the conditions in the pubkey script
        /// </summary>
        /// <value>Data generated by the spender; is almost always used as variables to satisfy the conditions in the pubkey script</value>
        [DataMember(Name = "script", EmitDefaultValue = false)]
        public string Script { get; set; }

        /// <summary>
        /// The blockchain address of the UTXO owner
        /// </summary>
        /// <value>The blockchain address of the UTXO owner</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// If set to \&quot;true\&quot;, the transaction is a coinbase transaction (a transaction created by a Bitcoin miner to collect their reward)
        /// </summary>
        /// <value>If set to \&quot;true\&quot;, the transaction is a coinbase transaction (a transaction created by a Bitcoin miner to collect their reward)</value>
        [DataMember(Name = "coinbase", EmitDefaultValue = true)]
        public bool Coinbase { get; set; }

        /// <summary>
        /// The hash of the transaction
        /// </summary>
        /// <value>The hash of the transaction</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash { get; set; }

        /// <summary>
        /// The index of the transaction output checked for the UTXO
        /// </summary>
        /// <value>The index of the transaction output checked for the UTXO</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public decimal Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BtcUTXO {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Coinbase: ").Append(Coinbase).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BtcUTXO);
        }

        /// <summary>
        /// Returns true if BtcUTXO instances are equal
        /// </summary>
        /// <param name="input">Instance of BtcUTXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BtcUTXO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Script == input.Script ||
                    (this.Script != null &&
                    this.Script.Equals(input.Script))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Coinbase == input.Coinbase ||
                    this.Coinbase.Equals(input.Coinbase)
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Script != null)
                {
                    hashCode = (hashCode * 59) + this.Script.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Coinbase.GetHashCode();
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
