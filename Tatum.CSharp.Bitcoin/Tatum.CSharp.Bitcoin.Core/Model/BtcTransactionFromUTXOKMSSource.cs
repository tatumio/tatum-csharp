/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Bitcoin.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Bitcoin.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Bitcoin.Core.Model
{
    /// <summary>
    /// BtcTransactionFromUTXOKMSSource
    /// </summary>
    [DataContract(Name = "BtcTransactionFromUTXOKMSSource")]
    public partial class BtcTransactionFromUTXOKMSSource : IEquatable<BtcTransactionFromUTXOKMSSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BtcTransactionFromUTXOKMSSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BtcTransactionFromUTXOKMSSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BtcTransactionFromUTXOKMSSource" /> class.
        /// </summary>
        /// <param name="txHash">The transaction hash of the UTXO to be spent (required).</param>
        /// <param name="index">The index of the UTXO to be spent (required).</param>
        /// <param name="signatureId">The KMS identifier of the private key of the blockchain address that holds the UTXO to be spent (required).</param>
        public BtcTransactionFromUTXOKMSSource(string txHash = default(string), decimal index = default(decimal), Guid signatureId = default(Guid))
        {
            // to ensure "txHash" is required (not null)
            if (txHash == null)
            {
                throw new ArgumentNullException("txHash is a required property for BtcTransactionFromUTXOKMSSource and cannot be null");
            }
            this.TxHash = txHash;
            this.Index = index;
            this.SignatureId = signatureId;
        }


        /// <summary>
        /// The transaction hash of the UTXO to be spent
        /// </summary>
        /// <value>The transaction hash of the UTXO to be spent</value>
        [DataMember(Name = "txHash", IsRequired = true, EmitDefaultValue = true)]
        public string TxHash { get; set; }

        /// <summary>
        /// The index of the UTXO to be spent
        /// </summary>
        /// <value>The index of the UTXO to be spent</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public decimal Index { get; set; }

        /// <summary>
        /// The KMS identifier of the private key of the blockchain address that holds the UTXO to be spent
        /// </summary>
        /// <value>The KMS identifier of the private key of the blockchain address that holds the UTXO to be spent</value>
        [DataMember(Name = "signatureId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SignatureId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BtcTransactionFromUTXOKMSSource {\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  SignatureId: ").Append(SignatureId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BtcTransactionFromUTXOKMSSource);
        }

        /// <summary>
        /// Returns true if BtcTransactionFromUTXOKMSSource instances are equal
        /// </summary>
        /// <param name="input">Instance of BtcTransactionFromUTXOKMSSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BtcTransactionFromUTXOKMSSource input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TxHash == input.TxHash ||
                    (this.TxHash != null &&
                    this.TxHash.Equals(input.TxHash))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.SignatureId == input.SignatureId ||
                    (this.SignatureId != null &&
                    this.SignatureId.Equals(input.SignatureId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TxHash != null)
                {
                    hashCode = (hashCode * 59) + this.TxHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                if (this.SignatureId != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TxHash (string) maxLength
            if (this.TxHash != null && this.TxHash.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TxHash, length must be less than 64.", new [] { "TxHash" });
            }

            // TxHash (string) minLength
            if (this.TxHash != null && this.TxHash.Length < 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TxHash, length must be greater than 64.", new [] { "TxHash" });
            }

            // Index (decimal) maximum
            if (this.Index > (decimal)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Index, must be a value less than or equal to 2147483647.", new [] { "Index" });
            }

            // Index (decimal) minimum
            if (this.Index < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Index, must be a value greater than or equal to 0.", new [] { "Index" });
            }

            yield break;
        }
    }

}
