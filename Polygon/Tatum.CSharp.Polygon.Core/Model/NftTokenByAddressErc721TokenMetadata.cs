/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Supported blockchains  Tatum supports multiple blockchains and various blockchain features.  Because not all blockchains function identically, Tatum supports a different set of features on each blockchain.  To see all the blockchains that Tatum supports, please refer to [this article](https://docs.tatum.io/introduction/supported-blockchains).  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Polygon.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Polygon.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Polygon.Core.Model
{
    /// <summary>
    /// NftTokenByAddressErc721TokenMetadata
    /// </summary>
    [DataContract(Name = "NftTokenByAddressErc721TokenMetadata")]
    public partial class NftTokenByAddressErc721TokenMetadata : IEquatable<NftTokenByAddressErc721TokenMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftTokenByAddressErc721TokenMetadata" /> class.
        /// </summary>
        /// <param name="tokenId">(EVM-based blockchains only) The ID of the NFT owned by this address.</param>
        /// <param name="url">The URL pointing to the NFT metadata; the URL may not be present, and if it is not returned, you can get it by calling the NFT Contract.tokenURI() method.</param>
        /// <param name="metadata">The metadata scheme obtained from the metadata URL; the scheme may not be present, and if it is not returned, you can get it using the &lt;a href&#x3D;\&quot;#operation/NftGetMetadataErc721\&quot;&gt;NFT metadata API&lt;/a&gt;.</param>
        public NftTokenByAddressErc721TokenMetadata(string tokenId = default(string), string url = default(string), Object metadata = default(Object))
        {
            this.TokenId = tokenId;
            this.Url = url;
            this.Metadata = metadata;
        }


        /// <summary>
        /// (EVM-based blockchains only) The ID of the NFT owned by this address
        /// </summary>
        /// <value>(EVM-based blockchains only) The ID of the NFT owned by this address</value>
        [DataMember(Name = "tokenId", EmitDefaultValue = false)]
        public string TokenId { get; set; }

        /// <summary>
        /// The URL pointing to the NFT metadata; the URL may not be present, and if it is not returned, you can get it by calling the NFT Contract.tokenURI() method
        /// </summary>
        /// <value>The URL pointing to the NFT metadata; the URL may not be present, and if it is not returned, you can get it by calling the NFT Contract.tokenURI() method</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The metadata scheme obtained from the metadata URL; the scheme may not be present, and if it is not returned, you can get it using the &lt;a href&#x3D;\&quot;#operation/NftGetMetadataErc721\&quot;&gt;NFT metadata API&lt;/a&gt;
        /// </summary>
        /// <value>The metadata scheme obtained from the metadata URL; the scheme may not be present, and if it is not returned, you can get it using the &lt;a href&#x3D;\&quot;#operation/NftGetMetadataErc721\&quot;&gt;NFT metadata API&lt;/a&gt;</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftTokenByAddressErc721TokenMetadata {\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftTokenByAddressErc721TokenMetadata);
        }

        /// <summary>
        /// Returns true if NftTokenByAddressErc721TokenMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of NftTokenByAddressErc721TokenMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftTokenByAddressErc721TokenMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // TokenId (string) maxLength
            if (this.TokenId != null && this.TokenId.Length > 78)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TokenId, length must be less than 78.", new [] { "TokenId" });
            }

            yield break;
        }
    }

}
