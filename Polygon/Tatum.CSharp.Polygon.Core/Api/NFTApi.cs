/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Tatum.CSharp.Polygon.Core.Client;
using Tatum.CSharp.Polygon.Core.Model;

namespace Tatum.CSharp.Polygon.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>NftMetadataErc721</returns>
        NftMetadataErc721 NftGetMetadataErc721(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string));
        /// <summary>
        /// Get NFT provenance information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>List&lt;NftProvenanceDataErc721&gt;</returns>
        List<NftProvenanceDataErc721> NftGetProvenanceDataErc721(string chain, string contractAddress, string tokenId, string xTestnetType = default(string));
        /// <summary>
        /// Get NFT royalty information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>NftRoyaltyErc721</returns>
        NftRoyaltyErc721 NftGetRoyaltyErc721(string chain, string contractAddress, string tokenId, string xTestnetType = default(string));
        /// <summary>
        /// Get all NFTs that a blockchain address holds
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <returns>List&lt;NftTokenByAddressErc721&gt;</returns>
        List<NftTokenByAddressErc721> NftGetTokensByAddressErc721(string chain, string address);
        /// <summary>
        /// Get all NFTs from a collection
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <returns>List&lt;NftTokenByCollectionErc721&gt;</returns>
        List<NftTokenByCollectionErc721> NftGetTokensByCollectionErc721(string chain, decimal pageSize, string address, decimal? offset = default(decimal?));
        /// <summary>
        /// Get NFT transactions on a blockchain address
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>List&lt;NftTx&gt;</returns>
        List<NftTx> NftGetTransactionByAddress(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?));
        /// <summary>
        /// Get NFT transactions for an NFT
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>List&lt;NftTx&gt;</returns>
        List<NftTx> NftGetTransactionByToken(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiWithHttpInfoSync : IApiAccessor
    {
        #region Synchronous Operations With Http Info
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of NftMetadataErc721</returns>
        ApiResponse<NftMetadataErc721> NftGetMetadataErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string));
        /// <summary>
        /// Get NFT provenance information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of List&lt;NftProvenanceDataErc721&gt;</returns>
        ApiResponse<List<NftProvenanceDataErc721>> NftGetProvenanceDataErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string xTestnetType = default(string));
        /// <summary>
        /// Get NFT royalty information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of NftRoyaltyErc721</returns>
        ApiResponse<NftRoyaltyErc721> NftGetRoyaltyErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string xTestnetType = default(string));
        /// <summary>
        /// Get all NFTs that a blockchain address holds
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <returns>ApiResponse of List&lt;NftTokenByAddressErc721&gt;</returns>
        ApiResponse<List<NftTokenByAddressErc721>> NftGetTokensByAddressErc721WithHttpInfo(string chain, string address);
        /// <summary>
        /// Get all NFTs from a collection
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTokenByCollectionErc721&gt;</returns>
        ApiResponse<List<NftTokenByCollectionErc721>> NftGetTokensByCollectionErc721WithHttpInfo(string chain, decimal pageSize, string address, decimal? offset = default(decimal?));
        /// <summary>
        /// Get NFT transactions on a blockchain address
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTx&gt;</returns>
        ApiResponse<List<NftTx>> NftGetTransactionByAddressWithHttpInfo(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?));
        /// <summary>
        /// Get NFT transactions for an NFT
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTx&gt;</returns>
        ApiResponse<List<NftTx>> NftGetTransactionByTokenWithHttpInfo(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?));
        #endregion Synchronous Operations With Http Info
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataErc721</returns>
        System.Threading.Tasks.Task<NftMetadataErc721> NftGetMetadataErc721Async(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT provenance information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftProvenanceDataErc721&gt;</returns>
        System.Threading.Tasks.Task<List<NftProvenanceDataErc721>> NftGetProvenanceDataErc721Async(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT royalty information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftRoyaltyErc721</returns>
        System.Threading.Tasks.Task<NftRoyaltyErc721> NftGetRoyaltyErc721Async(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all NFTs that a blockchain address holds
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTokenByAddressErc721&gt;</returns>
        System.Threading.Tasks.Task<List<NftTokenByAddressErc721>> NftGetTokensByAddressErc721Async(string chain, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all NFTs from a collection
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTokenByCollectionErc721&gt;</returns>
        System.Threading.Tasks.Task<List<NftTokenByCollectionErc721>> NftGetTokensByCollectionErc721Async(string chain, decimal pageSize, string address, decimal? offset = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transactions on a blockchain address
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTx&gt;</returns>
        System.Threading.Tasks.Task<List<NftTx>> NftGetTransactionByAddressAsync(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transactions for an NFT
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTx&gt;</returns>
        System.Threading.Tasks.Task<List<NftTx>> NftGetTransactionByTokenAsync(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiWithHttpInfoAsync : IApiAccessor
    {
        #region Asynchronous Operations With Http Info
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataErc721)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftMetadataErc721>> NftGetMetadataErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT provenance information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftProvenanceDataErc721&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftProvenanceDataErc721>>> NftGetProvenanceDataErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT royalty information
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftRoyaltyErc721)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftRoyaltyErc721>> NftGetRoyaltyErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all NFTs that a blockchain address holds
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTokenByAddressErc721&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftTokenByAddressErc721>>> NftGetTokensByAddressErc721WithHttpInfoAsync(string chain, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all NFTs from a collection
        /// </summary>
        /// <remarks>
        /// 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTokenByCollectionErc721&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftTokenByCollectionErc721>>> NftGetTokensByCollectionErc721WithHttpInfoAsync(string chain, decimal pageSize, string address, decimal? offset = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transactions on a blockchain address
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTx&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftTx>>> NftGetTransactionByAddressWithHttpInfoAsync(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transactions for an NFT
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTx&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftTx>>> NftGetTransactionByTokenWithHttpInfoAsync(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations With Http Info
    }


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApi : INFTApiSync, INFTApiWithHttpInfoSync, INFTApiAsync, INFTApiWithHttpInfoAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NFTApi : INFTApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Polygon.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client =  ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Polygon.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Polygon.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Polygon.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NFTApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = Tatum.CSharp.Polygon.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Get NFT metadata 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>NftMetadataErc721</returns>
        public NftMetadataErc721 NftGetMetadataErc721(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string))
        {
            var localVarResponse = NftGetMetadataErc721WithHttpInfo(chain, contractAddress, tokenId, account, xTestnetType);

            var exception = ExceptionFactory?.Invoke("NftGetMetadataErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT metadata 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of NftMetadataErc721</returns>
        public ApiResponse<NftMetadataErc721> NftGetMetadataErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetMetadataErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetMetadataErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetMetadataErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<NftMetadataErc721>("/v3/nft/metadata/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT metadata 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataErc721</returns>
        public async System.Threading.Tasks.Task<NftMetadataErc721> NftGetMetadataErc721Async(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetMetadataErc721WithHttpInfoAsync(chain, contractAddress, tokenId, account, xTestnetType, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetMetadataErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT metadata 1 credit per API call Get metadata of an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Flow Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get metadata for</param>
        /// <param name="tokenId">The ID of the NFT to get metadata for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="account">(Flow only) The account that holds the NFT (optional)</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataErc721)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NftMetadataErc721>> NftGetMetadataErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string account = default(string), string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetMetadataErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetMetadataErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetMetadataErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (account != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "account", account));
            }
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<NftMetadataErc721>("/v3/nft/metadata/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT provenance information 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>List&lt;NftProvenanceDataErc721&gt;</returns>
        public List<NftProvenanceDataErc721> NftGetProvenanceDataErc721(string chain, string contractAddress, string tokenId, string xTestnetType = default(string))
        {
            var localVarResponse = NftGetProvenanceDataErc721WithHttpInfo(chain, contractAddress, tokenId, xTestnetType);

            var exception = ExceptionFactory?.Invoke("NftGetProvenanceDataErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT provenance information 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of List&lt;NftProvenanceDataErc721&gt;</returns>
        public ApiResponse<List<NftProvenanceDataErc721>> NftGetProvenanceDataErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string xTestnetType = default(string))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetProvenanceDataErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetProvenanceDataErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetProvenanceDataErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<List<NftProvenanceDataErc721>>("/v3/nft/provenance/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT provenance information 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftProvenanceDataErc721&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftProvenanceDataErc721>> NftGetProvenanceDataErc721Async(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetProvenanceDataErc721WithHttpInfoAsync(chain, contractAddress, tokenId, xTestnetType, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetProvenanceDataErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT provenance information 1 credit per API call Get provenance information for an NFT. NOTE: This API works only for provenance NFT smart contracts. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get provenance information for</param>
        /// <param name="tokenId">The ID of the NFT to get provenance information for.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftProvenanceDataErc721&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NftProvenanceDataErc721>>> NftGetProvenanceDataErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetProvenanceDataErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetProvenanceDataErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetProvenanceDataErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<NftProvenanceDataErc721>>("/v3/nft/provenance/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT royalty information 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>NftRoyaltyErc721</returns>
        public NftRoyaltyErc721 NftGetRoyaltyErc721(string chain, string contractAddress, string tokenId, string xTestnetType = default(string))
        {
            var localVarResponse = NftGetRoyaltyErc721WithHttpInfo(chain, contractAddress, tokenId, xTestnetType);

            var exception = ExceptionFactory?.Invoke("NftGetRoyaltyErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT royalty information 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <returns>ApiResponse of NftRoyaltyErc721</returns>
        public ApiResponse<NftRoyaltyErc721> NftGetRoyaltyErc721WithHttpInfo(string chain, string contractAddress, string tokenId, string xTestnetType = default(string))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetRoyaltyErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetRoyaltyErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetRoyaltyErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<NftRoyaltyErc721>("/v3/nft/royalty/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT royalty information 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftRoyaltyErc721</returns>
        public async System.Threading.Tasks.Task<NftRoyaltyErc721> NftGetRoyaltyErc721Async(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetRoyaltyErc721WithHttpInfoAsync(chain, contractAddress, tokenId, xTestnetType, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetRoyaltyErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT royalty information 1 credit per API call Get information about royalties for an NFT. This API is supported for the following blockchains: BNB Smart Chain Celo Ethereum Harmony Klaytn KuCoin Community Chain Polygon Solana TRON
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="contractAddress">The blockchain address of the NFT to get royalty information for</param>
        /// <param name="tokenId">The ID of the NFT to get royalty information for&lt;br/&gt;Do &lt;b&gt;not&lt;/b&gt; use this parameter if you are getting metadata for an NFT on Solana, this parameter is irrelevant on Solana.</param>
        /// <param name="xTestnetType">Type of Ethereum testnet. Defaults to Sepolia. Valid only for ETH invocations for testnet API Key. For mainnet API Key, this value is ignored. (optional, default to ethereum-sepolia)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftRoyaltyErc721)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NftRoyaltyErc721>> NftGetRoyaltyErc721WithHttpInfoAsync(string chain, string contractAddress, string tokenId, string xTestnetType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetRoyaltyErc721");

            // verify the required parameter 'contractAddress' is set
            if (contractAddress == null)
                throw new ApiException(400, "Missing required parameter 'contractAddress' when calling NFTApi->NftGetRoyaltyErc721");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetRoyaltyErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("contractAddress", ClientUtils.ParameterToString(contractAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            if (xTestnetType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-testnet-type", ClientUtils.ParameterToString(xTestnetType)); // header parameter
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<NftRoyaltyErc721>("/v3/nft/royalty/{chain}/{contractAddress}/{tokenId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get all NFTs that a blockchain address holds 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <returns>List&lt;NftTokenByAddressErc721&gt;</returns>
        public List<NftTokenByAddressErc721> NftGetTokensByAddressErc721(string chain, string address)
        {
            var localVarResponse = NftGetTokensByAddressErc721WithHttpInfo(chain, address);

            var exception = ExceptionFactory?.Invoke("NftGetTokensByAddressErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all NFTs that a blockchain address holds 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <returns>ApiResponse of List&lt;NftTokenByAddressErc721&gt;</returns>
        public ApiResponse<List<NftTokenByAddressErc721>> NftGetTokensByAddressErc721WithHttpInfo(string chain, string address)
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTokensByAddressErc721");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTokensByAddressErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<List<NftTokenByAddressErc721>>("/v3/nft/address/balance/{chain}/{address}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get all NFTs that a blockchain address holds 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTokenByAddressErc721&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftTokenByAddressErc721>> NftGetTokensByAddressErc721Async(string chain, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetTokensByAddressErc721WithHttpInfoAsync(chain, address, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetTokensByAddressErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all NFTs that a blockchain address holds 1 credit per API call + 5 credits for each owned NFT Get all NFTs that a blockchain address holds. The NFTs are returned grouped by the smart contracts they were minted on. This API is supported for the following blockchains: Algorand BNB Smart Chain - mainnet only Celo Ethereum Polygon Solana On Solana and Algorand, if a blockchain address holds fewer than 50 NFTs, the API also returns each NFT&#39;s metadata. If the metadata is not returned, you can obtain it using the API for getting NFT metadata.
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">The blockchain address that you want to get the token balance of</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTokenByAddressErc721&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NftTokenByAddressErc721>>> NftGetTokensByAddressErc721WithHttpInfoAsync(string chain, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTokensByAddressErc721");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTokensByAddressErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<NftTokenByAddressErc721>>("/v3/nft/address/balance/{chain}/{address}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get all NFTs from a collection 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <returns>List&lt;NftTokenByCollectionErc721&gt;</returns>
        public List<NftTokenByCollectionErc721> NftGetTokensByCollectionErc721(string chain, decimal pageSize, string address, decimal? offset = default(decimal?))
        {
            var localVarResponse = NftGetTokensByCollectionErc721WithHttpInfo(chain, pageSize, address, offset);

            var exception = ExceptionFactory?.Invoke("NftGetTokensByCollectionErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all NFTs from a collection 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTokenByCollectionErc721&gt;</returns>
        public ApiResponse<List<NftTokenByCollectionErc721>> NftGetTokensByCollectionErc721WithHttpInfo(string chain, decimal pageSize, string address, decimal? offset = default(decimal?))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTokensByCollectionErc721");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTokensByCollectionErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<List<NftTokenByCollectionErc721>>("/v3/nft/collection/{chain}/{address}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get all NFTs from a collection 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTokenByCollectionErc721&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftTokenByCollectionErc721>> NftGetTokensByCollectionErc721Async(string chain, decimal pageSize, string address, decimal? offset = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetTokensByCollectionErc721WithHttpInfoAsync(chain, pageSize, address, offset, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetTokensByCollectionErc721", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all NFTs from a collection 1 credit per API call + 5 credits for each listed NFT Get all NFTs from a collection (all the NFTs that were minted on the smart contract). This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="address">The blockchain address of the collection</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTokenByCollectionErc721&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NftTokenByCollectionErc721>>> NftGetTokensByCollectionErc721WithHttpInfoAsync(string chain, decimal pageSize, string address, decimal? offset = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTokensByCollectionErc721");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTokensByCollectionErc721");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<NftTokenByCollectionErc721>>("/v3/nft/collection/{chain}/{address}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transactions on a blockchain address 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>List&lt;NftTx&gt;</returns>
        public List<NftTx> NftGetTransactionByAddress(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            var localVarResponse = NftGetTransactionByAddressWithHttpInfo(chain, address, tokenAddress, pageSize, offset, from, to);

            var exception = ExceptionFactory?.Invoke("NftGetTransactionByAddress", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transactions on a blockchain address 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTx&gt;</returns>
        public ApiResponse<List<NftTx>> NftGetTransactionByAddressWithHttpInfo(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTransactionByAddress");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTransactionByAddress");

            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
                throw new ApiException(400, "Missing required parameter 'tokenAddress' when calling NFTApi->NftGetTransactionByAddress");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenAddress", ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<List<NftTx>>("/v3/nft/transaction/{chain}/{address}/{tokenAddress}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transactions on a blockchain address 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTx&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftTx>> NftGetTransactionByAddressAsync(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetTransactionByAddressWithHttpInfoAsync(chain, address, tokenAddress, pageSize, offset, from, to, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetTransactionByAddress", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transactions on a blockchain address 1 credit per API call Get incoming and outgoing NFT transactions on a blockchain address. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="address">Account address you want to get balance of</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTx&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NftTx>>> NftGetTransactionByAddressWithHttpInfoAsync(string chain, string address, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTransactionByAddress");

            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling NFTApi->NftGetTransactionByAddress");

            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
                throw new ApiException(400, "Missing required parameter 'tokenAddress' when calling NFTApi->NftGetTransactionByAddress");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenAddress", ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<NftTx>>("/v3/nft/transaction/{chain}/{address}/{tokenAddress}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transactions for an NFT 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>List&lt;NftTx&gt;</returns>
        public List<NftTx> NftGetTransactionByToken(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            var localVarResponse = NftGetTransactionByTokenWithHttpInfo(chain, tokenId, tokenAddress, pageSize, offset, from, to);

            var exception = ExceptionFactory?.Invoke("NftGetTransactionByToken", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transactions for an NFT 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <returns>ApiResponse of List&lt;NftTx&gt;</returns>
        public ApiResponse<List<NftTx>> NftGetTransactionByTokenWithHttpInfo(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTransactionByToken");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetTransactionByToken");

            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
                throw new ApiException(400, "Missing required parameter 'tokenAddress' when calling NFTApi->NftGetTransactionByToken");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenAddress", ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<List<NftTx>>("/v3/nft/transaction/tokenId/{chain}/{tokenAddress}/{tokenId}", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transactions for an NFT 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftTx&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftTx>> NftGetTransactionByTokenAsync(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await NftGetTransactionByTokenWithHttpInfoAsync(chain, tokenId, tokenAddress, pageSize, offset, from, to, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("NftGetTransactionByToken", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transactions for an NFT 1 credit per API call Get incoming and outgoing transactions for an NFT. This API is supported for the following blockchains: Celo Ethereum Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Polygon.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The blockchain to work with</param>
        /// <param name="tokenId">NFT Token ID.</param>
        /// <param name="tokenAddress">Address of the token smart contract</param>
        /// <param name="pageSize">Max number of items per page is 50.</param>
        /// <param name="offset">Offset to obtain next page of the data. (optional)</param>
        /// <param name="from">Transactions from this block onwards will be included. (optional)</param>
        /// <param name="to">Transactions up to this block will be included. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftTx&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NftTx>>> NftGetTransactionByTokenWithHttpInfoAsync(string chain, string tokenId, string tokenAddress, decimal pageSize, decimal? offset = default(decimal?), decimal? from = default(decimal?), decimal? to = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling NFTApi->NftGetTransactionByToken");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->NftGetTransactionByToken");

            // verify the required parameter 'tokenAddress' is set
            if (tokenAddress == null)
                throw new ApiException(400, "Missing required parameter 'tokenAddress' when calling NFTApi->NftGetTransactionByToken");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chain", ClientUtils.ParameterToString(chain)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenId", ClientUtils.ParameterToString(tokenId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tokenAddress", ClientUtils.ParameterToString(tokenAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "to", to));
            }

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<NftTx>>("/v3/nft/transaction/tokenId/{chain}/{tokenAddress}/{tokenId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

    }
}
