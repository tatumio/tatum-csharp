/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Supported blockchains  Tatum supports multiple blockchains and various blockchain features.  Because not all blockchains function identically, Tatum supports a different set of features on each blockchain.  To see all the blockchains that Tatum supports, please refer to [this article](https://docs.tatum.io/introduction/supported-blockchains).  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Solana.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Solana.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Solana.Core.Model
{
    /// <summary>
    /// SolanaTxMeta
    /// </summary>
    [DataContract(Name = "SolanaTxMeta")]
    public partial class SolanaTxMeta : IEquatable<SolanaTxMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaTxMeta" /> class.
        /// </summary>
        /// <param name="err">err.</param>
        /// <param name="fee">fee.</param>
        /// <param name="innerInstructions">innerInstructions.</param>
        /// <param name="logMessages">logMessages.</param>
        /// <param name="postBalances">postBalances.</param>
        /// <param name="postTokenBalances">postTokenBalances.</param>
        /// <param name="preBalances">preBalances.</param>
        /// <param name="preTokenBalances">preTokenBalances.</param>
        /// <param name="rewards">rewards.</param>
        /// <param name="status">status.</param>
        public SolanaTxMeta(Object err = default(Object), decimal fee = default(decimal), List<Object> innerInstructions = default(List<Object>), List<string> logMessages = default(List<string>), List<decimal> postBalances = default(List<decimal>), List<TokenBalance> postTokenBalances = default(List<TokenBalance>), List<decimal> preBalances = default(List<decimal>), List<TokenBalance> preTokenBalances = default(List<TokenBalance>), List<Object> rewards = default(List<Object>), Object status = default(Object))
        {
            this.Err = err;
            this.Fee = fee;
            this.InnerInstructions = innerInstructions;
            this.LogMessages = logMessages;
            this.PostBalances = postBalances;
            this.PostTokenBalances = postTokenBalances;
            this.PreBalances = preBalances;
            this.PreTokenBalances = preTokenBalances;
            this.Rewards = rewards;
            this.Status = status;
        }


        /// <summary>
        /// Gets or Sets Err
        /// </summary>
        [DataMember(Name = "err", EmitDefaultValue = false)]
        public Object Err { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Gets or Sets InnerInstructions
        /// </summary>
        [DataMember(Name = "innerInstructions", EmitDefaultValue = false)]
        public List<Object> InnerInstructions { get; set; }

        /// <summary>
        /// Gets or Sets LogMessages
        /// </summary>
        [DataMember(Name = "logMessages", EmitDefaultValue = false)]
        public List<string> LogMessages { get; set; }

        /// <summary>
        /// Gets or Sets PostBalances
        /// </summary>
        [DataMember(Name = "postBalances", EmitDefaultValue = false)]
        public List<decimal> PostBalances { get; set; }

        /// <summary>
        /// Gets or Sets PostTokenBalances
        /// </summary>
        [DataMember(Name = "postTokenBalances", EmitDefaultValue = false)]
        public List<TokenBalance> PostTokenBalances { get; set; }

        /// <summary>
        /// Gets or Sets PreBalances
        /// </summary>
        [DataMember(Name = "preBalances", EmitDefaultValue = false)]
        public List<decimal> PreBalances { get; set; }

        /// <summary>
        /// Gets or Sets PreTokenBalances
        /// </summary>
        [DataMember(Name = "preTokenBalances", EmitDefaultValue = false)]
        public List<TokenBalance> PreTokenBalances { get; set; }

        /// <summary>
        /// Gets or Sets Rewards
        /// </summary>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<Object> Rewards { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public Object Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SolanaTxMeta {\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  InnerInstructions: ").Append(InnerInstructions).Append("\n");
            sb.Append("  LogMessages: ").Append(LogMessages).Append("\n");
            sb.Append("  PostBalances: ").Append(PostBalances).Append("\n");
            sb.Append("  PostTokenBalances: ").Append(PostTokenBalances).Append("\n");
            sb.Append("  PreBalances: ").Append(PreBalances).Append("\n");
            sb.Append("  PreTokenBalances: ").Append(PreTokenBalances).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolanaTxMeta);
        }

        /// <summary>
        /// Returns true if SolanaTxMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of SolanaTxMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolanaTxMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Err == input.Err ||
                    (this.Err != null &&
                    this.Err.Equals(input.Err))
                ) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee.Equals(input.Fee)
                ) && 
                (
                    this.InnerInstructions == input.InnerInstructions ||
                    this.InnerInstructions != null &&
                    input.InnerInstructions != null &&
                    this.InnerInstructions.SequenceEqual(input.InnerInstructions)
                ) && 
                (
                    this.LogMessages == input.LogMessages ||
                    this.LogMessages != null &&
                    input.LogMessages != null &&
                    this.LogMessages.SequenceEqual(input.LogMessages)
                ) && 
                (
                    this.PostBalances == input.PostBalances ||
                    this.PostBalances != null &&
                    input.PostBalances != null &&
                    this.PostBalances.SequenceEqual(input.PostBalances)
                ) && 
                (
                    this.PostTokenBalances == input.PostTokenBalances ||
                    this.PostTokenBalances != null &&
                    input.PostTokenBalances != null &&
                    this.PostTokenBalances.SequenceEqual(input.PostTokenBalances)
                ) && 
                (
                    this.PreBalances == input.PreBalances ||
                    this.PreBalances != null &&
                    input.PreBalances != null &&
                    this.PreBalances.SequenceEqual(input.PreBalances)
                ) && 
                (
                    this.PreTokenBalances == input.PreTokenBalances ||
                    this.PreTokenBalances != null &&
                    input.PreTokenBalances != null &&
                    this.PreTokenBalances.SequenceEqual(input.PreTokenBalances)
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Err != null)
                {
                    hashCode = (hashCode * 59) + this.Err.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Fee.GetHashCode();
                if (this.InnerInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.InnerInstructions.GetHashCode();
                }
                if (this.LogMessages != null)
                {
                    hashCode = (hashCode * 59) + this.LogMessages.GetHashCode();
                }
                if (this.PostBalances != null)
                {
                    hashCode = (hashCode * 59) + this.PostBalances.GetHashCode();
                }
                if (this.PostTokenBalances != null)
                {
                    hashCode = (hashCode * 59) + this.PostTokenBalances.GetHashCode();
                }
                if (this.PreBalances != null)
                {
                    hashCode = (hashCode * 59) + this.PreBalances.GetHashCode();
                }
                if (this.PreTokenBalances != null)
                {
                    hashCode = (hashCode * 59) + this.PreTokenBalances.GetHashCode();
                }
                if (this.Rewards != null)
                {
                    hashCode = (hashCode * 59) + this.Rewards.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
