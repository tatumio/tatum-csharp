/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Supported blockchains  Tatum supports multiple blockchains and various blockchain features.  Because not all blockchains function identically, Tatum supports a different set of features on each blockchain.  To see all the blockchains that Tatum supports, please refer to [this article](https://docs.tatum.io/introduction/supported-blockchains).  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Solana.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Solana.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Solana.Core.Model
{
    /// <summary>
    /// SolanaTxMessageHeader
    /// </summary>
    [DataContract(Name = "SolanaTxMessageHeader")]
    public partial class SolanaTxMessageHeader : IEquatable<SolanaTxMessageHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolanaTxMessageHeader" /> class.
        /// </summary>
        /// <param name="numReadonlySignedAccounts">numReadonlySignedAccounts.</param>
        /// <param name="numReadonlyUnsignedAccounts">numReadonlyUnsignedAccounts.</param>
        /// <param name="numRequiredSignatures">numRequiredSignatures.</param>
        public SolanaTxMessageHeader(decimal numReadonlySignedAccounts = default(decimal), decimal numReadonlyUnsignedAccounts = default(decimal), decimal numRequiredSignatures = default(decimal))
        {
            this.NumReadonlySignedAccounts = numReadonlySignedAccounts;
            this.NumReadonlyUnsignedAccounts = numReadonlyUnsignedAccounts;
            this.NumRequiredSignatures = numRequiredSignatures;
        }


        /// <summary>
        /// Gets or Sets NumReadonlySignedAccounts
        /// </summary>
        [DataMember(Name = "numReadonlySignedAccounts", EmitDefaultValue = false)]
        public decimal NumReadonlySignedAccounts { get; set; }

        /// <summary>
        /// Gets or Sets NumReadonlyUnsignedAccounts
        /// </summary>
        [DataMember(Name = "numReadonlyUnsignedAccounts", EmitDefaultValue = false)]
        public decimal NumReadonlyUnsignedAccounts { get; set; }

        /// <summary>
        /// Gets or Sets NumRequiredSignatures
        /// </summary>
        [DataMember(Name = "numRequiredSignatures", EmitDefaultValue = false)]
        public decimal NumRequiredSignatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SolanaTxMessageHeader {\n");
            sb.Append("  NumReadonlySignedAccounts: ").Append(NumReadonlySignedAccounts).Append("\n");
            sb.Append("  NumReadonlyUnsignedAccounts: ").Append(NumReadonlyUnsignedAccounts).Append("\n");
            sb.Append("  NumRequiredSignatures: ").Append(NumRequiredSignatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolanaTxMessageHeader);
        }

        /// <summary>
        /// Returns true if SolanaTxMessageHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of SolanaTxMessageHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolanaTxMessageHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumReadonlySignedAccounts == input.NumReadonlySignedAccounts ||
                    this.NumReadonlySignedAccounts.Equals(input.NumReadonlySignedAccounts)
                ) && 
                (
                    this.NumReadonlyUnsignedAccounts == input.NumReadonlyUnsignedAccounts ||
                    this.NumReadonlyUnsignedAccounts.Equals(input.NumReadonlyUnsignedAccounts)
                ) && 
                (
                    this.NumRequiredSignatures == input.NumRequiredSignatures ||
                    this.NumRequiredSignatures.Equals(input.NumRequiredSignatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NumReadonlySignedAccounts.GetHashCode();
                hashCode = (hashCode * 59) + this.NumReadonlyUnsignedAccounts.GetHashCode();
                hashCode = (hashCode * 59) + this.NumRequiredSignatures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
