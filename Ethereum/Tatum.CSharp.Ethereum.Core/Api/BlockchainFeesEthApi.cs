/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Tatum.CSharp.Ethereum.Core.Client;
using Tatum.CSharp.Ethereum.Core.Model;

namespace Tatum.CSharp.Ethereum.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockchainFeesEthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <returns>FeeETH</returns>
        FeeETH EstimateFeeBlockchain(EstimateFee estimateFee);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <returns>FeeETH</returns>
        FeeETH EstimateFeeBlockchain(EstimateFeeBatchMintNft estimateFeeBatchMintNft);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <returns>FeeETH</returns>
        FeeETH EstimateFeeBlockchain(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <returns>FeeETH</returns>
        FeeETH EstimateFeeBlockchain(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial);
        /// <summary>
        /// Get recommended blockchain fee / gas price
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get recommended blockchain fee / gas price
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainFee</returns>
        BlockchainFee getBlockchainFee();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockchainFeesEthApiWithHttpInfoSync : IApiAccessor
    {
        #region Synchronous Operations With Http Info
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFee estimateFee);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeBatchMintNft estimateFeeBatchMintNft);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet);
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial);
        /// <summary>
        /// Get recommended blockchain fee / gas price
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get recommended blockchain fee / gas price
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainFee</returns>
        ApiResponse<BlockchainFee> getBlockchainFeeWithHttpInfo();
        #endregion Synchronous Operations With Http Info
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockchainFeesEthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFee estimateFee, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeBatchMintNft estimateFeeBatchMintNft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get recommended blockchain fee / gas price
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get recommended blockchain fee / gas price
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockchainFee</returns>
        System.Threading.Tasks.Task<BlockchainFee> getBlockchainFeeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockchainFeesEthApiWithHttpInfoAsync : IApiAccessor
    {
        #region Asynchronous Operations With Http Info
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFee estimateFee, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeBatchMintNft estimateFeeBatchMintNft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate the fee for a transaction
        /// </summary>
        /// <remarks>
        /// 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get recommended blockchain fee / gas price
        /// </summary>
        /// <remarks>
        /// 1 credit per API call Get recommended blockchain fee / gas price
        /// </remarks>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockchainFee)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockchainFee>> getBlockchainFeeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations With Http Info
    }


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockchainFeesEthApi : IBlockchainFeesEthApiSync, IBlockchainFeesEthApiWithHttpInfoSync, IBlockchainFeesEthApiAsync, IBlockchainFeesEthApiWithHttpInfoAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockchainFeesEthApi : IBlockchainFeesEthApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFeesEthApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockchainFeesEthApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFeesEthApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockchainFeesEthApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Ethereum.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client =  ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Ethereum.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFeesEthApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BlockchainFeesEthApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));
            if (client == null) throw new ArgumentNullException(nameof(client));

            Configuration = Tatum.CSharp.Ethereum.Core.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(client, Configuration.BasePath, handler);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Tatum.CSharp.Ethereum.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFeesEthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BlockchainFeesEthApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            ExceptionFactory = Tatum.CSharp.Ethereum.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <returns>FeeETH</returns>
        public FeeETH EstimateFeeBlockchain(EstimateFee estimateFee)
        {
            var localVarResponse = EstimateFeeBlockchainWithHttpInfo(estimateFee);

            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        public ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFee estimateFee)
        {
            // verify the required parameter 'estimateFee' is set
            if (estimateFee == null)
                throw new ApiException(400, "Missing required parameter 'estimateFee' when calling BlockchainFeesEthApi->EstimateFeeBlockchain");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFee;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        public async System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFee estimateFee, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await EstimateFeeBlockchainWithHttpInfoAsync(estimateFee, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFee"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFee estimateFee, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'estimateFee' is set
            if (estimateFee == null)
                throw new ApiException(400, "Missing required parameter 'estimateFee' when calling BlockchainFeesEthApi->EstimateFeeBlockchain");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFee;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <returns>FeeETH</returns>
        public FeeETH EstimateFeeBlockchain(EstimateFeeBatchMintNft estimateFeeBatchMintNft)
        {
            var localVarResponse = EstimateFeeBlockchainWithHttpInfo(estimateFeeBatchMintNft);

            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_0", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        public ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeBatchMintNft estimateFeeBatchMintNft)
        {
            // verify the required parameter 'estimateFeeBatchMintNft' is set
            if (estimateFeeBatchMintNft == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeBatchMintNft' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_0");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeBatchMintNft;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        public async System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeBatchMintNft estimateFeeBatchMintNft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await EstimateFeeBlockchainWithHttpInfoAsync(estimateFeeBatchMintNft, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_0", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeBatchMintNft"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeBatchMintNft estimateFeeBatchMintNft, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'estimateFeeBatchMintNft' is set
            if (estimateFeeBatchMintNft == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeBatchMintNft' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_0");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeBatchMintNft;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <returns>FeeETH</returns>
        public FeeETH EstimateFeeBlockchain(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet)
        {
            var localVarResponse = EstimateFeeBlockchainWithHttpInfo(estimateFeeDeployCustodialWallet);

            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_1", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        public ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet)
        {
            // verify the required parameter 'estimateFeeDeployCustodialWallet' is set
            if (estimateFeeDeployCustodialWallet == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeDeployCustodialWallet' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_1");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeDeployCustodialWallet;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        public async System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await EstimateFeeBlockchainWithHttpInfoAsync(estimateFeeDeployCustodialWallet, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_1", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeDeployCustodialWallet"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeDeployCustodialWallet estimateFeeDeployCustodialWallet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'estimateFeeDeployCustodialWallet' is set
            if (estimateFeeDeployCustodialWallet == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeDeployCustodialWallet' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_1");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeDeployCustodialWallet;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <returns>FeeETH</returns>
        public FeeETH EstimateFeeBlockchain(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial)
        {
            var localVarResponse = EstimateFeeBlockchainWithHttpInfo(estimateFeeTransferFromCustodial);

            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_2", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <returns>ApiResponse of FeeETH</returns>
        public ApiResponse<FeeETH> EstimateFeeBlockchainWithHttpInfo(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial)
        {
            // verify the required parameter 'estimateFeeTransferFromCustodial' is set
            if (estimateFeeTransferFromCustodial == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeTransferFromCustodial' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_2");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeTransferFromCustodial;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Post<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeETH</returns>
        public async System.Threading.Tasks.Task<FeeETH> EstimateFeeBlockchainAsync(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await EstimateFeeBlockchainWithHttpInfoAsync(estimateFeeTransferFromCustodial, cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("EstimateFeeBlockchain_2", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate the fee for a transaction 10 credits per API call. Estimate current transaction fee for different operations. Supported blockchains: Bitcoin Litecoin Harmony.ONE The XDC Network Ethereum Celo Klaytn Binance Smart Chain Polygon
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimateFeeTransferFromCustodial"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeETH)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeETH>> EstimateFeeBlockchainWithHttpInfoAsync(EstimateFeeTransferFromCustodial estimateFeeTransferFromCustodial, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'estimateFeeTransferFromCustodial' is set
            if (estimateFeeTransferFromCustodial == null)
                throw new ApiException(400, "Missing required parameter 'estimateFeeTransferFromCustodial' when calling BlockchainFeesEthApi->EstimateFeeBlockchain_2");

            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
                "application/json"
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = estimateFeeTransferFromCustodial;

            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<FeeETH>("/v3/blockchain/estimate", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

        /// <summary>
        /// Get recommended blockchain fee / gas price 1 credit per API call Get recommended blockchain fee / gas price
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainFee</returns>
        public BlockchainFee getBlockchainFee()
        {
            var localVarResponse = getBlockchainFeeWithHttpInfo();

            var exception = ExceptionFactory?.Invoke("GetBlockchainFee", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get recommended blockchain fee / gas price 1 credit per API call Get recommended blockchain fee / gas price
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainFee</returns>
        public ApiResponse<BlockchainFee> getBlockchainFeeWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = Client.Get<BlockchainFee>("/v3/blockchain/fee/ETH", localVarRequestOptions, Configuration);

            return localVarResponse;
        }

        /// <summary>
        /// Get recommended blockchain fee / gas price 1 credit per API call Get recommended blockchain fee / gas price
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockchainFee</returns>
        public async System.Threading.Tasks.Task<BlockchainFee> getBlockchainFeeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await getBlockchainFeeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            
            var exception = ExceptionFactory?.Invoke("GetBlockchainFee", localVarResponse);
            if (exception != null) throw exception;

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get recommended blockchain fee / gas price 1 credit per API call Get recommended blockchain fee / gas price
        /// </summary>
        /// <exception cref="Tatum.CSharp.Ethereum.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockchainFee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockchainFee>> getBlockchainFeeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarRequestOptions = new RequestOptions();

            var contentTypes = new string[]{
            };

            // to determine the Accept header
            var accepts = new string[]{
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (X-API-Key) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<BlockchainFee>("/v3/blockchain/fee/ETH", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            return localVarResponse;
        }

    }
}
