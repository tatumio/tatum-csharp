/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.Harmony.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.Harmony.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.Harmony.Core.Model
{
    /// <summary>
    /// NftTokenByAddressErc721
    /// </summary>
    [DataContract(Name = "NftTokenByAddressErc721")]
    public partial class NftTokenByAddressErc721 : IEquatable<NftTokenByAddressErc721>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftTokenByAddressErc721" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NftTokenByAddressErc721() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NftTokenByAddressErc721" /> class.
        /// </summary>
        /// <param name="contractAddress">On Algorand, this is the asset ID (the ID of the NFT); on the other blockchains, this is the address of the NFT smart contract (required).</param>
        /// <param name="balances">On Algorand, an array of \&quot;1\&quot; to indicate that the NFTs with the specified IDs exist, or array with amount of fractions for &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;; on the other blockchains, this is an array of the IDs of the NFTs. (required).</param>
        /// <param name="blockNumber">(EVM-based blockchains only) On EVM-based blockchains like Celo, Polygon or Ethereum, this is an array of block numbers, in which the NFT was received by the address.</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="supply">Only on Algorand, shows supply of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;.</param>
        /// <param name="decimals">Only on Algorand, shows decimals of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;.</param>
        public NftTokenByAddressErc721(string contractAddress = default(string), List<string> balances = default(List<string>), List<decimal> blockNumber = default(List<decimal>), List<NftTokenByAddressErc721TokenMetadata> metadata = default(List<NftTokenByAddressErc721TokenMetadata>), decimal supply = default(decimal), decimal decimals = default(decimal))
        {
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for NftTokenByAddressErc721 and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "balances" is required (not null)
            if (balances == null)
            {
                throw new ArgumentNullException("balances is a required property for NftTokenByAddressErc721 and cannot be null");
            }
            this.Balances = balances;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for NftTokenByAddressErc721 and cannot be null");
            }
            this.Metadata = metadata;
            this.BlockNumber = blockNumber;
            this.Supply = supply;
            this.Decimals = decimals;
        }


        /// <summary>
        /// On Algorand, this is the asset ID (the ID of the NFT); on the other blockchains, this is the address of the NFT smart contract
        /// </summary>
        /// <value>On Algorand, this is the asset ID (the ID of the NFT); on the other blockchains, this is the address of the NFT smart contract</value>
        [DataMember(Name = "contractAddress", IsRequired = true, EmitDefaultValue = true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// On Algorand, an array of \&quot;1\&quot; to indicate that the NFTs with the specified IDs exist, or array with amount of fractions for &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;; on the other blockchains, this is an array of the IDs of the NFTs.
        /// </summary>
        /// <value>On Algorand, an array of \&quot;1\&quot; to indicate that the NFTs with the specified IDs exist, or array with amount of fractions for &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;; on the other blockchains, this is an array of the IDs of the NFTs.</value>
        [DataMember(Name = "balances", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Balances { get; set; }

        /// <summary>
        /// (EVM-based blockchains only) On EVM-based blockchains like Celo, Polygon or Ethereum, this is an array of block numbers, in which the NFT was received by the address
        /// </summary>
        /// <value>(EVM-based blockchains only) On EVM-based blockchains like Celo, Polygon or Ethereum, this is an array of block numbers, in which the NFT was received by the address</value>
        [DataMember(Name = "blockNumber", EmitDefaultValue = false)]
        public List<decimal> BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public List<NftTokenByAddressErc721TokenMetadata> Metadata { get; set; }

        /// <summary>
        /// Only on Algorand, shows supply of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;
        /// </summary>
        /// <value>Only on Algorand, shows supply of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;</value>
        [DataMember(Name = "supply", EmitDefaultValue = false)]
        public decimal Supply { get; set; }

        /// <summary>
        /// Only on Algorand, shows decimals of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;
        /// </summary>
        /// <value>Only on Algorand, shows decimals of &lt;a href&#x3D;\&quot;https://developer.algorand.org/docs/get-started/tokenization/nft/#fractional-nfts\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Fractional NFTs.&lt;/a&gt;</value>
        [DataMember(Name = "decimals", EmitDefaultValue = false)]
        public decimal Decimals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftTokenByAddressErc721 {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Supply: ").Append(Supply).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftTokenByAddressErc721);
        }

        /// <summary>
        /// Returns true if NftTokenByAddressErc721 instances are equal
        /// </summary>
        /// <param name="input">Instance of NftTokenByAddressErc721 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftTokenByAddressErc721 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber != null &&
                    input.BlockNumber != null &&
                    this.BlockNumber.SequenceEqual(input.BlockNumber)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Supply == input.Supply ||
                    this.Supply.Equals(input.Supply)
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    this.Decimals.Equals(input.Decimals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContractAddress.GetHashCode();
                }
                if (this.Balances != null)
                {
                    hashCode = (hashCode * 59) + this.Balances.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Supply.GetHashCode();
                hashCode = (hashCode * 59) + this.Decimals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
