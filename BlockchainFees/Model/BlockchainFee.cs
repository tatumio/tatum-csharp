/*
 * Tatum API Reference
 *
 * # Welcome to the Tatum API Reference!  ## What is Tatum?  Tatum offers a flexible framework to build, run, and scale blockchain apps fast. To learn more about the Tatum blockchain development framework, visit [our website](https://tatum.io/framework).  The Tatum API features powerful endpoints that simplify a complex blockchain into single API requests. Code for all supported blockchains using unified API calls.  ## Need help?  To chat with other developers, get help from the Support team, and engage with the thriving Tatum community, join  our [Discord server](https://discord.com/invite/tatum). For more information about how to work with Tatum, review the [online documentation](https://docs.tatum.io/).  ## About this API Reference  The Tatum API Reference is based on OpenAPI Specification v3.1.0 with a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md) applied.  # Authentication  When using the Tatum API, you authenticate yourself with an **API key**. <SecurityDefinitions /> 
 *
 * The version of the OpenAPI document: 3.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Tatum.CSharp.BlockchainFees.Core.Client.FileParameter;
using OpenAPIDateConverter = Tatum.CSharp.BlockchainFees.Core.Client.OpenAPIDateConverter;

namespace Tatum.CSharp.BlockchainFees.Core.Model
{
    /// <summary>
    /// Recommended fees to perform blockchain transaction
    /// </summary>
    [DataContract(Name = "BlockchainFee")]
    public partial class BlockchainFee : IEquatable<BlockchainFee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockchainFee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainFee" /> class.
        /// </summary>
        /// <param name="fast">Fast transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei (required).</param>
        /// <param name="medium">Medium transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei (required).</param>
        /// <param name="slow">Slow transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei (required).</param>
        /// <param name="baseFee">(evm-based only) This is the minimum fee needs to paid in order for the tx to be accepted into block..</param>
        /// <param name="time">Last time fees were recalculated (required).</param>
        /// <param name="block">Last used to calculate fee from (required).</param>
        public BlockchainFee(decimal fast = default(decimal), decimal medium = default(decimal), decimal slow = default(decimal), decimal baseFee = default(decimal), string time = default(string), string block = default(string))
        {
            this.Fast = fast;
            this.Medium = medium;
            this.Slow = slow;
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new ArgumentNullException("time is a required property for BlockchainFee and cannot be null");
            }
            this.Time = time;
            // to ensure "block" is required (not null)
            if (block == null)
            {
                throw new ArgumentNullException("block is a required property for BlockchainFee and cannot be null");
            }
            this.Block = block;
            this.BaseFee = baseFee;
        }


        /// <summary>
        /// Fast transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
        /// </summary>
        /// <value>Fast transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei</value>
        [DataMember(Name = "fast", IsRequired = true, EmitDefaultValue = true)]
        public decimal Fast { get; set; }

        /// <summary>
        /// Medium transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
        /// </summary>
        /// <value>Medium transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei</value>
        [DataMember(Name = "medium", IsRequired = true, EmitDefaultValue = true)]
        public decimal Medium { get; set; }

        /// <summary>
        /// Slow transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei
        /// </summary>
        /// <value>Slow transaction acceptance time into block. For btc-based chains - fee per byte. For evm-based chains - gas price in wei</value>
        [DataMember(Name = "slow", IsRequired = true, EmitDefaultValue = true)]
        public decimal Slow { get; set; }

        /// <summary>
        /// (evm-based only) This is the minimum fee needs to paid in order for the tx to be accepted into block.
        /// </summary>
        /// <value>(evm-based only) This is the minimum fee needs to paid in order for the tx to be accepted into block.</value>
        [DataMember(Name = "baseFee", EmitDefaultValue = false)]
        public decimal BaseFee { get; set; }

        /// <summary>
        /// Last time fees were recalculated
        /// </summary>
        /// <value>Last time fees were recalculated</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public string Time { get; set; }

        /// <summary>
        /// Last used to calculate fee from
        /// </summary>
        /// <value>Last used to calculate fee from</value>
        [DataMember(Name = "block", IsRequired = true, EmitDefaultValue = true)]
        public string Block { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockchainFee {\n");
            sb.Append("  Fast: ").Append(Fast).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Slow: ").Append(Slow).Append("\n");
            sb.Append("  BaseFee: ").Append(BaseFee).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockchainFee);
        }

        /// <summary>
        /// Returns true if BlockchainFee instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockchainFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockchainFee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fast == input.Fast ||
                    this.Fast.Equals(input.Fast)
                ) && 
                (
                    this.Medium == input.Medium ||
                    this.Medium.Equals(input.Medium)
                ) && 
                (
                    this.Slow == input.Slow ||
                    this.Slow.Equals(input.Slow)
                ) && 
                (
                    this.BaseFee == input.BaseFee ||
                    this.BaseFee.Equals(input.BaseFee)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Fast.GetHashCode();
                hashCode = (hashCode * 59) + this.Medium.GetHashCode();
                hashCode = (hashCode * 59) + this.Slow.GetHashCode();
                hashCode = (hashCode * 59) + this.BaseFee.GetHashCode();
                if (this.Time != null)
                {
                    hashCode = (hashCode * 59) + this.Time.GetHashCode();
                }
                if (this.Block != null)
                {
                    hashCode = (hashCode * 59) + this.Block.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
