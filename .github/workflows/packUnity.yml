name: Pack Unity DLLs

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string

env:
  PACKAGE_NAME: Tatum.CSharp.${{ inputs.name }}
  ARTEFACT_NAME: Unity-${{ inputs.name }}

jobs:
  preparePackage:
    name: Build and Publish package
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Ethereum - Get Dependencies
        run: nuget install ${{ env.PACKAGE_NAME }} -Version ${{ inputs.version }} -OutputDirectory ./${{ env.PACKAGE_NAME }}_DLLs
      - name: Gather DLLs
        run: |
          fromPath=./${{ env.PACKAGE_NAME }}_DLLs
          for dir in "$fromPath"/*/; do
            dest="$fromPath"/${{ env.PACKAGE_NAME }}
            mkdir -p "$dest"
          
            patternArray=(
              "$dir"lib/netstandard2.0/*.dll
              "$dir"ref/netstandard2.0/*.dll
              "$dir"lib/netstandard*/*.dll
              "$dir"ref/netstandard*/*.dll
              "$dir"lib/*.dll
            )
          
            ignoreArray=(
              Newtonsoft.Json
            )
          
            for source in "${patternArray[@]}"; do
              matches=( $source )
              match=${matches[${#matches[@]} - 1]}
          
              if [[ "${match}" =~ "${ignoreArray[@]}" ]]; then
                break
              fi
          
              if ls $match 1> /dev/null 2>&1; then
                cp -v "$match" "$dest"
                break
              fi
            done
          
          done
      - name: Create Unity Package Artefact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTEFACT_NAME }}
          path: ./${{ env.PACKAGE_NAME }}_DLLs/${{ env.PACKAGE_NAME }}