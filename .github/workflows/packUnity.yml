name: Pack Unity DLLs

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  Pack_Unity:
    strategy:
      matrix:
        arrays: [
          { chain: "Ethereum", dependsOn: "Evm.Local" },
          { chain: "Bitcoin", dependsOn: "Bitcoin.Local" },
          { chain: "Nft", dependsOn: "Evm.Local" },
          { chain: "FungibleTokens", dependsOn: "Evm.Local" },
          { chain: "MultiTokens", dependsOn: "Evm.Local" },
          { chain: "Polygon", dependsOn: "Evm.Local" },
          { chain: "Bsc", dependsOn: "Evm.Local" },
          { chain: "Harmony", dependsOn: "Evm.Local" }
        ]
    name: ${{ matrix.arrays.chain }} - Unity Package Artifact
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: Tatum.CSharp.${{ matrix.arrays.chain }}
      DEPENDENCY_NAME: Tatum.CSharp.${{ matrix.arrays.dependsOn }}
      ARTEFACT_NAME: Unity-${{ matrix.arrays.chain }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Add version number to 'Tatum_SDK_Unity' string in Configuration.cs
        run: |
          sed -i "s,Tatum_SDK_CSharp,Tatum_SDK_Unity/${{ inputs.version }},g" ./Tatum.CSharp.Core/Client/Configuration.cs
          grep -i "Tatum_SDK_CSharp" ./Tatum.CSharp.Core/Client/Configuration.cs    
      - name: Ethereum - Get Dependencies
        run: nuget install ${{ env.PACKAGE_NAME }} -Version ${{ inputs.version }} -OutputDirectory ./packages
      - name: Gather DLLs
        run: |
          fromPath=./packages
          for dir in "$fromPath"/*/; do
            dest="$fromPath"/${{ env.PACKAGE_NAME }}
            mkdir -p "$dest"
          
            patternArray=(
              "$dir"lib/netstandard2.0/*.dll
              "$dir"ref/netstandard2.0/*.dll
              "$dir"lib/netstandard*/*.dll
              "$dir"ref/netstandard*/*.dll
              "$dir"lib/*.dll
            )
          
            ignoreArray=(
              Newtonsoft.Json
            )
          
            for source in "${patternArray[@]}"; do
              matches=( $source )
              match=${matches[${#matches[@]} - 1]}
          
              if [[ "${match}" =~ "${ignoreArray[@]}" ]]; then
                break
              fi
          
              if ls $match 1> /dev/null 2>&1; then
                cp -v "$match" "$dest"
                break
              fi
            done          
          done
      - name: Create Unity Package Artefact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTEFACT_NAME }}
          path: |
            ./Tatum.CSharp.Core
            ./${{ env.DEPENDENCY_NAME }}
            ./${{ env.PACKAGE_NAME }}
            ./packages
            !./packages/Tatum.CSharp.Core.dll
            !./packages/${{ env.DEPENDENCY_NAME }}.dll
            !./packages/${{ env.PACKAGE_NAME }}.dll