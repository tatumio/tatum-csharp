name: Pack Unity DLLs

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package Version'
        required: true
        type: string

env:
  DOWNSTREAM_DISPATCH_ADDRESS: https://api.github.com/repos/tatumio/tatum-csharp/actions/workflows/packageLinksUnity.yml/dispatches

jobs:
  Pack_Unity:
    strategy:
      matrix:
        arrays: [
          { package: Ethereum, dependency: Evm.Local }
        ]
    name: ${{ matrix.arrays.package }} - Unity Package Artifact
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: Tatum.CSharp.${{ matrix.arrays.package }}
      UNITY_NAME: com.tatum.${{ matrix.arrays.package }}
      PROJECT_PATH: ./${{ matrix.arrays.package }}/Tatum.CSharp.${{ matrix.arrays.package }}/Tatum.CSharp.${{ matrix.arrays.package }}.csproj
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Add version number to 'Tatum_CSharp_SDK' string in Configuration.cs
        run: |
          sed -i "s,Tatum_SDK_CSharp,Tatum_SDK_Unity_${{ matrix.arrays.package }}/${{ inputs.version }},g" ./${{ matrix.arrays.package }}/Tatum.CSharp.${{ matrix.arrays.package }}.Core/Client/Configuration.cs
          grep -i "Tatum_SDK_Unity" ./${{ matrix.arrays.package }}/Tatum.CSharp.${{ matrix.arrays.package }}.Core/Client/Configuration.cs   
      - name: Propagate PackageReleaseNotes from the Core package .csproj
        run: |
          sed -i "s/<PackageReleaseNotes>.*<\/PackageReleaseNotes>/<PackageReleaseNotes>$(grep -oPm1 "(?<=<PackageReleaseNotes>)[^<]+" ./${{ matrix.arrays.package }}/Tatum.CSharp.${{ matrix.arrays.package }}.Core/Tatum.CSharp.${{ matrix.arrays.package }}.Core.csproj)<\/PackageReleaseNotes>/g" ${{ env.PROJECT_PATH }}
      - name: ${{ matrix.arrays.package }} - Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}
      - name: ${{ matrix.arrays.package }} - Build
        run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release
      - name: ${{ matrix.arrays.package }} - Get Dependencies
        run: |
          nuget install ${{ env.PACKAGE_NAME }} -Version ${{ inputs.version }} -OutputDirectory ./packages
          nuget install System.ComponentModel.Annotations -OutputDirectory ./packages
      - name: Gather DLLs
        run: |
          fromPath=./packages
          for dir in "$fromPath"/*/; do
            dest="$fromPath"
            mkdir -p "$dest"
          
            echo "Created $dest"
          
            patternArray=(
              "$dir"lib/netstandard2.0/*.dll
              "$dir"ref/netstandard2.0/*.dll
              "$dir"lib/netstandard*/*.dll
              "$dir"ref/netstandard*/*.dll
              "$dir"lib/*.dll
            )
          
            ignoreArray=(
              Newtonsoft.Json
            )
          
            for source in "${patternArray[@]}"; do
              matches=( $source )
              match=${matches[${#matches[@]} - 1]}
          
              if [[ "${match}" =~ "${ignoreArray[@]}" ]]; then
                break
              fi
          
              if ls $match 1> /dev/null 2>&1; then
                cp -v "$match" "$dest"
                break
              fi
            done   
          
          ls -l "$dest"
          done
#      - name: Create Unity Package Artefact
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ env.ARTEFACT_NAME }}
#          path: |
#            ./${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}
#            ./${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}.Core
#            ./Tatum.CSharp.Utils
#            ./Tatum.CSharp.${{ matrix.arrays.dependency }}
#            ./packages/*.dll
#            ./Unity/licence_notice (${{ env.PACKAGE_NAME }}).txt
#            ./Unity/README.md
#            !**/bin
#            !**/obj
#            !./packages/Tatum.*
      - name: Move all files included in the package to ./Unity/${{ env.UNITY_NAME}} without excluded ones
        run: |
          mkdir -p ./Unity/${{ env.UNITY_NAME}}
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}.Core
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.Utils
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.${{ matrix.arrays.dependency }}
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/packages
          mv -v ./${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}/* ./Unity/${{ env.UNITY_NAME}}/${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}
          mv -v ./${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}.Core/* ./Unity/${{ env.UNITY_NAME}}/${{ matrix.arrays.package }}/${{ env.PACKAGE_NAME }}.Core
          mv -v ./Tatum.CSharp.Utils/* ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.Utils
          mv -v ./Tatum.CSharp.${{ matrix.arrays.dependency }}/* ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.${{ matrix.arrays.dependency }}
          mv -v ./packages/*.dll ./Unity/${{ env.UNITY_NAME}}/packages
          mv -v './Unity/licence_notice (${{ env.PACKAGE_NAME }}).txt' ./Unity/${{ env.UNITY_NAME}}
          mv -v ./Unity/README.md ./Unity/${{ env.UNITY_NAME}}
          find ./Unity -name 'bin' -or -name 'obj' -type d -exec rm -r {} +
          rm -rf ./Unity/${{ env.UNITY_NAME}}/packages/Tatum.*
      - name: Generate .meta files
        run: |
          UNITY_NAME=${{ env.UNITY_NAME}}
          
          # Set template meta files paths
          FOLDER_TEMPLATE_META="./Unity/folderTemplate.meta"
          MONO_TEMPLATE_META="./Unity/monoTemplate.meta"
          DEFAULT_TEMPLATE_META="./Unity/defaultTemplate.meta"
          
          # Iterate through all folders in Unity directory (recursive)
          for dir in $(find ./Unity/$UNITY_NAME -type d); do
             # Get folder name
             FOLDER_NAME=$(basename "$dir")
             if [ ! -f "$dir/$FOLDER_NAME.meta" ]; then
          
              # Generate new GUID for folder
              FOLDER_NEW_GUID=$(cat /proc/sys/kernel/random/uuid)
          
              # Move template meta file to current folder and rename to folder name
              cp "$FOLDER_TEMPLATE_META" "$dir/../$FOLDER_NAME.meta"
          
              # Replace ${GUID} tag in meta file with new GUID
              sed -i "s/\${GUID}/$FOLDER_NEW_GUID/g" "$dir/../$FOLDER_NAME.meta"
             fi
          
             # Iterate through all .cs files in current folder
             for file in $(find "$dir" -type f -name "*.cs" ! -name "*.meta"); do
                 # Get file name with extension
                 FILE_NAME_WITH_EXTENSION=$(basename "$file")
          
                 echo $file.$FILE_NAME_WITH_EXTENSION.meta
          
                 if [ ! -f "$FILE_NAME_WITH_EXTENSION.meta" ]; then
          
                  # Generate new GUID for file
                  MONO_NEW_GUID=$(cat /proc/sys/kernel/random/uuid)
          
                  # Move template meta file to current file and rename to file name with extension
                  cp "$MONO_TEMPLATE_META" "$FILE_NAME_WITH_EXTENSION.meta"
          
                  # Replace ${GUID} tag in meta file with new GUID
                  sed -i "s/\${GUID}/$MONO_NEW_GUID/g" "$FILE_NAME_WITH_EXTENSION.meta"
                fi
             done
             # Iterate through all non-.cs files in current folder
             for file in $(find "$dir" -type f ! -name "*.cs" ! -name "*.meta"); do
                 # Get file name with extension
                 FILE_NAME_WITH_EXTENSION=$(basename "$file")
                
                 echo $file.$FILE_NAME_WITH_EXTENSION.meta
                 if [ ! -f "$FILE_NAME_WITH_EXTENSION.meta" ]; then
          
                  # Generate new GUID for file
                  DEFAULT_NEW_GUID=$(cat /proc/sys/kernel/random/uuid)
          
                  # Move template meta file to current file and rename to file name with extension
                  cp "$DEFAULT_TEMPLATE_META" "$FILE_NAME_WITH_EXTENSION.meta"
          
                  # Replace ${GUID} tag in meta file with new GUID
                  sed -i "s/\${GUID}/$DEFAULT_NEW_GUID/g" "$FILE_NAME_WITH_EXTENSION.meta"
                 fi  
             done
          done
      - name: Display contents of the package recursively
        run: |
          ls -R ./Unity/${{ env.UNITY_NAME}}
      - name: Clenup orphan meta files
        run: |
          # Set Unity folder name
          UNITY_NAME=${{ env.UNITY_NAME}}

          # Iterate through all files in Unity directory (recursive)
          for file in $(find ./Unity/$UNITY_NAME -type f -name "*.meta"); do
              # Get file name without extension
              FILE_NAME_WITHOUT_EXTENSION="${file%.*}"
              if [ ! -e "$FILE_NAME_WITHOUT_EXTENSION" ]; then
                  # Delete meta file if corresponding file or folder does not exist
                  echo "Deleting orphan meta file: $file"
                  rm "$file"
              fi
          done
      - name: Display contents of the package recursively
        run: |
          ls -R ./Unity/${{ env.UNITY_NAME}}

#  Prepare_Unity_Package_Links:
#    name: Dispatch Unity Package links preparation
#    runs-on: ubuntu-latest
#    steps:
#      - name: Trigger Unity Package links preparation
#        run: |
#          curl -X POST \
#          -H "Authorization: Bearer ${{secrets.DISPATCH_TOKEN}}" \
#          -H "Accept: application/vnd.github.v3+json" \
#          '${{ env.DOWNSTREAM_DISPATCH_ADDRESS }}' \
#          -d '{"ref": "master", "inputs": {"runId": "${{ github.run_id }}", "checkSuiteId": "${{ github.event.check_suite.id }}"}}'
#    needs: Pack_Unity
        
        
        