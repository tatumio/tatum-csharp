name: Pack Unity DLLs

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package Version'
        required: true
        type: string

jobs:
  Pack_Unity:
    strategy:
      matrix:
        package: [
          Ethereum
        ]
    name: ${{ matrix.package }} - Unity Package Artifact
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: Tatum.CSharp.${{ matrix.package }}
      ARTEFACT_NAME: Unity-${{ matrix.package }}
      PROJECT_PATH: ./${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}.csproj
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Add version number to 'Tatum_CSharp_SDK' string in Configuration.cs
        run: |
          sed -i "s,Tatum_SDK_CSharp,Tatum_SDK_CSharp_${{ matrix.package }}/${{ inputs.version }},g" ./${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}.Core/Client/Configuration.cs
          grep -i "Tatum_SDK_CSharp" ./${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}.Core/Client/Configuration.cs   
      - name: Propagate PackageReleaseNotes from the Core package .csproj
        run: |
          sed -i "s/<PackageReleaseNotes>.*<\/PackageReleaseNotes>/<PackageReleaseNotes>$(grep -oPm1 "(?<=<PackageReleaseNotes>)[^<]+" ./${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}.Core/Tatum.CSharp.${{ matrix.package }}.Core.csproj)<\/PackageReleaseNotes>/g" ${{ env.PROJECT_PATH }}
      - name: ${{ matrix.package }} - Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}
      - name: ${{ matrix.package }} - Build
        run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release
      - name: Gather DLLs
        run: |
          cd ${{ matrix.package }}/Tatum.CSharp.${{ matrix.package }}
          ls
          fromPath=./packages
          for dir in "$fromPath"/*/; do
            dest="$fromPath"/${{ env.PACKAGE_NAME }}
            mkdir -p "$dest"
          
            echo "Created $dest"
          
            patternArray=(
              "$dir"lib/netstandard2.0/*.dll
              "$dir"ref/netstandard2.0/*.dll
              "$dir"lib/netstandard*/*.dll
              "$dir"ref/netstandard*/*.dll
              "$dir"lib/*.dll
            )
          
            ignoreArray=(
              Newtonsoft.Json
            )
          
            for source in "${patternArray[@]}"; do
              matches=( $source )
              match=${matches[${#matches[@]} - 1]}
          
              if [[ "${match}" =~ "${ignoreArray[@]}" ]]; then
                break
              fi
          
              if ls $match 1> /dev/null 2>&1; then
                cp -v "$match" "$dest"
                break
              fi
            done   
          
          ls -l "$dest"
          done
      - name: Create Unity Package Artefact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTEFACT_NAME }}
          path: |
            ./${{ matrix.package }}
            ./${{ env.PACKAGE_NAME }}
            ./packages
            !**/bin
            !**/obj
            !./packages/Tatum.CSharp.Core.dll
            !./packages/${{ env.PACKAGE_NAME }}.dll