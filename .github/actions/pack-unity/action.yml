name: Create or Update Unity Package

inputs:
  package:
    description: 'package name'
    required: true
  dependency:
    description: 'package dependency'
    required: false
  version:
    description: 'package version'
    required: true
    
description: 'Creates or Updates Unity Package'

runs:
  using: "composite"
  steps:
    - name: Setup Env Variables
      shell: bash
      run: |
        echo "PACKAGE_NAME=Tatum.CSharp.${{ inputs.package }}" >> $GITHUB_ENV
        echo "PROJECT_PATH=./${{ inputs.package }}/Tatum.CSharp.${{ inputs.package }}/Tatum.CSharp.${{ inputs.package }}.csproj" >> $GITHUB_ENV
    - name: Lowercase package name
      shell: bash
      run: |
        name="com.tatum.${{ inputs.package }}"
        echo "UNITY_NAME=${name,,}" >> ${GITHUB_ENV}
    - name: Add version number to 'Tatum_CSharp_SDK' string in Configuration.cs
      shell: bash
      run: |
        sed -i "s,Tatum_SDK_CSharp,Tatum_SDK_Unity_${{ inputs.package }}/${{ inputs.version }},g" ./${{ inputs.package }}/Tatum.CSharp.${{ inputs.package }}.Core/Client/Configuration.cs
        grep -i "Tatum_SDK_Unity" ./${{ inputs.package }}/Tatum.CSharp.${{ inputs.package }}.Core/Client/Configuration.cs   
    - name: Propagate PackageReleaseNotes from the Core package .csproj
      shell: bash
      run: |
        sed -i "s/<PackageReleaseNotes>.*<\/PackageReleaseNotes>/<PackageReleaseNotes>$(grep -oPm1 "(?<=<PackageReleaseNotes>)[^<]+" ./${{ inputs.package }}/Tatum.CSharp.${{ inputs.package }}.Core/Tatum.CSharp.${{ inputs.package }}.Core.csproj)<\/PackageReleaseNotes>/g" ${{ env.PROJECT_PATH }}
    - name: ${{ inputs.package }} - Restore dependencies
      shell: bash
      run: dotnet restore ${{ env.PROJECT_PATH }}
    - name: ${{ inputs.package }} - Build
      shell: bash
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release
    - name: ${{ inputs.package }} - Get Dependencies
      shell: bash
      run: |
        nuget install ${{ env.PACKAGE_NAME }} -Version ${{ inputs.version }} -OutputDirectory ./packages
        nuget install System.ComponentModel.Annotations -OutputDirectory ./packages
    - name: Gather DLLs
      shell: bash
      run: |
        fromPath=./packages
        for dir in "$fromPath"/*/; do
          dest="$fromPath"
          mkdir -p "$dest"

          echo "Created $dest"

          patternArray=(
            "$dir"lib/netstandard2.0/*.dll
            "$dir"ref/netstandard2.0/*.dll
            "$dir"lib/netstandard*/*.dll
            "$dir"ref/netstandard*/*.dll
            "$dir"lib/*.dll
          )

          ignoreArray=(
            Newtonsoft.Json
          )

          for source in "${patternArray[@]}"; do
            matches=( $source )
            match=${matches[${#matches[@]} - 1]}

            if [[ "${match}" =~ "${ignoreArray[@]}" ]]; then
              break
            fi

            if ls $match 1> /dev/null 2>&1; then
              cp -v "$match" "$dest"
              break
            fi
          done   

        ls -l "$dest"
        done
    - name: Clear the package folder files if it exists, not including .meta files
      shell: bash
      run: |
        if [ -d "./Unity/${{ env.UNITY_NAME}}" ]; then
          find ./Unity/${{ env.UNITY_NAME}} -type f ! -name "*.meta" -delete
        fi
    - name: Move all files included in the package to ./Unity/${{ env.UNITY_NAME}} without excluded ones
      shell: bash
      run: |
        mkdir -p ./Unity/${{ env.UNITY_NAME}}
        mkdir -p ./Unity/${{ env.UNITY_NAME}}/${{ inputs.package }}/${{ env.PACKAGE_NAME }}
        mkdir -p ./Unity/${{ env.UNITY_NAME}}/${{ inputs.package }}/${{ env.PACKAGE_NAME }}.Core
        mkdir -p ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.Utils
        mkdir -p ./Unity/${{ env.UNITY_NAME}}/packages
        
        if [ ! -z "${{ inputs.dependency }}" ]; then
          mkdir -p ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.${{ inputs.dependency }}
          rsync -avz ./Tatum.CSharp.${{ inputs.dependency }}/* ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.${{ inputs.dependency }}
        fi 
        
        rsync -avz ./${{ inputs.package }}/${{ env.PACKAGE_NAME }}/* ./Unity/${{ env.UNITY_NAME}}/${{ inputs.package }}/${{ env.PACKAGE_NAME }}
        rsync -avz ./${{ inputs.package }}/${{ env.PACKAGE_NAME }}.Core/* ./Unity/${{ env.UNITY_NAME}}/${{ inputs.package }}/${{ env.PACKAGE_NAME }}.Core
        rsync -avz ./Tatum.CSharp.Utils/* ./Unity/${{ env.UNITY_NAME}}/Tatum.CSharp.Utils
        
        rsync -avz ./packages/*.dll ./Unity/${{ env.UNITY_NAME}}/packages
        cp ./Unity/licence_notice_${{ env.PACKAGE_NAME }}.txt ./Unity/${{ env.UNITY_NAME}}
        cp ./Unity/README.md ./Unity/${{ env.UNITY_NAME}}
        cp ./Unity/package.json ./Unity/${{ env.UNITY_NAME}}
        cp ./Unity/assemblyTemplate.asmdef ./Unity/${{ env.UNITY_NAME}}/${{ env.UNITY_NAME}}.asmdef
        find ./Unity/${{ env.UNITY_NAME}} -name 'obj' -o -name 'bin' -type d -print0 | xargs -0 rm -rf
        rm -rf ./Unity/${{ env.UNITY_NAME}}/packages/Tatum.*
    - name: In replace tags in package.json
      shell: bash
      run: |
        sed -i 's/${packageLowercase}/${{ env.UNITY_NAME}}/g' ./Unity/${{ env.UNITY_NAME}}/package.json
        sed -i 's/${package}/${{ inputs.package }}/g' ./Unity/${{ env.UNITY_NAME}}/package.json
        sed -i 's/${version}/${{ inputs.version }}/g' ./Unity/${{ env.UNITY_NAME}}/package.json
    - name: Replace tags in .asmdef file
      shell: bash
      run: |
        sed -i 's/${assemblyName}/${{ env.UNITY_NAME}}/g' ./Unity/${{ env.UNITY_NAME}}/${{ env.UNITY_NAME}}.asmdef
    - name: Generate .meta files
      shell: bash
      run: |
        UNITY_NAME=${{ env.UNITY_NAME}}

        # Set template meta files paths
        FOLDER_TEMPLATE_META="./Unity/folderTemplate.meta"
        MONO_TEMPLATE_META="./Unity/monoTemplate.meta"
        PLUGIN_TEMPLATE_META="./Unity/pluginTemplate.meta"
        DEFAULT_TEMPLATE_META="./Unity/defaultTemplate.meta"

        # Iterate through all folders in Unity directory (recursive)
        for dir in $(find ./Unity/$UNITY_NAME -type d); do
           # Get folder name
           FOLDER_NAME=$(basename "$dir")
           if [ ! -f "$dir/../$FOLDER_NAME.meta" ]; then

            # Generate new GUID for folder
            FOLDER_NEW_GUID=$(cat /proc/sys/kernel/random/uuid | sed 's/-//g')

            # Move template meta file to current folder and rename to folder name
            cp "$FOLDER_TEMPLATE_META" "$dir/../$FOLDER_NAME.meta"

            # Replace ${GUID} tag in meta file with new GUID
            sed -i "s/\${GUID}/$FOLDER_NEW_GUID/g" "$dir/../$FOLDER_NAME.meta"
           fi

           # Iterate through all .cs files in current folder
           for file in $(find "$dir" -type f -name "*.cs" ! -name "*.meta"); do
               # Get file name with extension
               echo $file.meta

               if [ ! -f "$file.meta" ]; then

                # Generate new GUID for file
                MONO_NEW_GUID=$(cat /proc/sys/kernel/random/uuid | sed 's/-//g')

                # Move template meta file to current file and rename to file name with extension
                cp "$MONO_TEMPLATE_META" "$file.meta"

                echo generated $file.meta

                # Replace ${GUID} tag in meta file with new GUID
                sed -i "s/\${GUID}/$MONO_NEW_GUID/g" "$file.meta"
              fi
           done

           # Iterate through all .dll files in current folder
           for file in $(find "$dir" -type f -name "*.dll" ! -name "*.meta"); do
               # Get file name with extension
               echo $file.meta

               if [ ! -f "$file.meta" ]; then

                # Generate new GUID for file
                MONO_NEW_GUID=$(cat /proc/sys/kernel/random/uuid | sed 's/-//g')

                # Move template meta file to current file and rename to file name with extension
                cp "$PLUGIN_TEMPLATE_META" "$file.meta"

                echo generated $file.meta

                # Replace ${GUID} tag in meta file with new GUID
                sed -i "s/\${GUID}/$MONO_NEW_GUID/g" "$file.meta"
              fi
           done

           # Iterate through all non-.cs/.dll files in current folder
           for file in $(find "$dir" -type f ! -name "*.cs" ! -name "*.dll" ! -name "*.meta"); do
               # Get file name with extension
               FILE_NAME_WITH_EXTENSION=$(basename "$file")

               echo $file.meta
               if [ ! -f "$file.meta" ]; then

                # Generate new GUID for file
                DEFAULT_NEW_GUID=$(cat /proc/sys/kernel/random/uuid | sed 's/-//g')

                # Move template meta file to current file and rename to file name with extension
                cp "$DEFAULT_TEMPLATE_META" "$file.meta"

                echo generated $file.meta

                # Replace ${GUID} tag in meta file with new GUID
                sed -i "s/\${GUID}/$DEFAULT_NEW_GUID/g" "$file.meta"
               fi  
           done
        done
    - name: Cleanup empty folders
      shell: bash
      run: find ./Unity/${{ env.UNITY_NAME }} -type d -empty -not -name ".meta" -delete
    - name: Cleanup orphan meta files
      shell: bash
      run: |
        # Set Unity folder name
        UNITY_NAME=${{ env.UNITY_NAME}}

        # Iterate through all files in Unity directory (recursive)
        for file in $(find ./Unity/$UNITY_NAME -type f -name "*.meta"); do
            # Get file name without extension
            FILE_NAME_WITHOUT_EXTENSION="${file%.*}"
            if [ ! -e "$FILE_NAME_WITHOUT_EXTENSION" ]; then
                # Delete meta file if corresponding file or folder does not exist
                echo "Deleting orphan meta file: $file"
                rm "$file"
            fi
        done